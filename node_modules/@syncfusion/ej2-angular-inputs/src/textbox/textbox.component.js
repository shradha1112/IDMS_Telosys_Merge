var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, ElementRef, ViewContainerRef, Renderer2, Injector, ChangeDetectionStrategy, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { ComponentBase, ComponentMixins, FormBase, setValue } from '@syncfusion/ej2-angular-base';
import { TextBox } from '@syncfusion/ej2-inputs';
export var inputs = ['cssClass', 'enablePersistence', 'enableRtl', 'enabled', 'floatLabelType', 'locale', 'placeholder', 'readonly', 'showClearButton', 'type', 'value'];
export var outputs = ['blur', 'change', 'created', 'destroyed', 'focus', 'input', 'valueChange'];
export var twoWays = ['value'];
/**
 * Represents the EJ2 Angular TextBox Component.
 * ```html
 * <ejs-textbox [value]='value'></ejs-textbox>
 * ```
 */
var TextBoxComponent = /** @class */ (function (_super) {
    __extends(TextBoxComponent, _super);
    function TextBoxComponent(ngEle, srenderer, viewContainerRef, injector) {
        var _this = _super.call(this) || this;
        _this.ngEle = ngEle;
        _this.srenderer = srenderer;
        _this.viewContainerRef = viewContainerRef;
        _this.injector = injector;
        _this.skipFromEvent = true;
        _this.element = _this.ngEle.nativeElement;
        _this.injectedModules = _this.injectedModules || [];
        _this.registerEvents(outputs);
        _this.addTwoWay.call(_this, twoWays);
        setValue('currentInstance', _this, _this.viewContainerRef);
        return _this;
    }
    TextBoxComponent_1 = TextBoxComponent;
    TextBoxComponent.prototype.registerOnChange = function (registerFunction) {
    };
    TextBoxComponent.prototype.registerOnTouched = function (registerFunction) {
    };
    TextBoxComponent.prototype.writeValue = function (value) {
    };
    TextBoxComponent.prototype.setDisabledState = function (disabled) {
    };
    TextBoxComponent.prototype.ngOnInit = function () {
    };
    TextBoxComponent.prototype.ngAfterViewInit = function () {
    };
    TextBoxComponent.prototype.ngOnDestroy = function () {
    };
    TextBoxComponent.prototype.ngAfterContentChecked = function () {
    };
    TextBoxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ejs-textbox',
                    inputs: inputs,
                    outputs: outputs,
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return TextBoxComponent_1; }),
                            multi: true
                        }
                    ],
                    queries: {}
                },] },
    ];
    /** @nocollapse */
    TextBoxComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
        { type: ViewContainerRef, },
        { type: Injector, },
    ]; };
    TextBoxComponent = TextBoxComponent_1 = __decorate([
        ComponentMixins([ComponentBase, FormBase]),
        __metadata("design:paramtypes", [ElementRef, Renderer2, ViewContainerRef, Injector])
    ], TextBoxComponent);
    return TextBoxComponent;
    var TextBoxComponent_1;
}(TextBox));
export { TextBoxComponent };
//# sourceMappingURL=textbox.component.js.map
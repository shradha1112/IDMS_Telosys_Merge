var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';
import { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';
var input = ['avatarIconCss', 'avatarText', 'cssClass', 'enabled', 'leadingIconCss', 'text', 'trailingIconCss'];
var outputs = [];
/**
 * `e-chip` directive represent a chip of the Angular ChipList.
 * ```html
 * <ejs-chiplist >
 *   <e-chips>
 *    <e-chip text='chip1'></e-chip>
 *    <e-chip text='chip2'></e-chip>
 *   </e-chips>
 * </ejs-chiplist>
 * ```
 */
var ChipDirective = /** @class */ (function (_super) {
    __extends(ChipDirective, _super);
    function ChipDirective(viewContainerRef) {
        var _this = _super.call(this) || this;
        _this.viewContainerRef = viewContainerRef;
        setValue('currentInstance', _this, _this.viewContainerRef);
        _this.registerEvents(outputs);
        return _this;
    }
    ChipDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'e-chips>e-chip',
                    inputs: input,
                    outputs: outputs,
                    queries: {}
                },] },
    ];
    /** @nocollapse */
    ChipDirective.ctorParameters = function () { return [
        { type: ViewContainerRef, },
    ]; };
    return ChipDirective;
}(ComplexBase));
export { ChipDirective };
/**
 * Chip Array Directive
 * @private
 */
var ChipsDirective = /** @class */ (function (_super) {
    __extends(ChipsDirective, _super);
    function ChipsDirective() {
        return _super.call(this, 'chips') || this;
    }
    ChipsDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'ejs-chiplist>e-chips',
                    queries: {
                        children: new ContentChildren(ChipDirective)
                    },
                },] },
    ];
    /** @nocollapse */
    ChipsDirective.ctorParameters = function () { return []; };
    return ChipsDirective;
}(ArrayBase));
export { ChipsDirective };
//# sourceMappingURL=chips.directive.js.map
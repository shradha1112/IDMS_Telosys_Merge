var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';
import { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';
var input = ['buttonModel', 'type'];
var outputs = ['click'];
/**
 * 'e-button' directive represent a button of angular dialog
 * It must be contained in a Dialog component(`ej-dialog`).
 * ```html
 * <ejs-dialog id='dialog' showCloseIcon=true>
 *   <e-buttons>
 *    <e-dialogbutton [buttonModal]='okButton'></e-button>
 *    <e-dialogbutton [buttonModal]='cancelButton'></e-button>
 *   </e-buttons>
 * </ejs-dialog>
 * ```
 */
var DialogButtonDirective = /** @class */ (function (_super) {
    __extends(DialogButtonDirective, _super);
    function DialogButtonDirective(viewContainerRef) {
        var _this = _super.call(this) || this;
        _this.viewContainerRef = viewContainerRef;
        setValue('currentInstance', _this, _this.viewContainerRef);
        _this.registerEvents(outputs);
        return _this;
    }
    DialogButtonDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'e-buttons>e-dialogbutton',
                    inputs: input,
                    outputs: outputs,
                    queries: {}
                },] },
    ];
    /** @nocollapse */
    DialogButtonDirective.ctorParameters = function () { return [
        { type: ViewContainerRef, },
    ]; };
    return DialogButtonDirective;
}(ComplexBase));
export { DialogButtonDirective };
/**
 * DialogButton Array Directive
 * @private
 */
var ButtonsDirective = /** @class */ (function (_super) {
    __extends(ButtonsDirective, _super);
    function ButtonsDirective() {
        return _super.call(this, 'buttons') || this;
    }
    ButtonsDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'ejs-dialog>e-buttons',
                    queries: {
                        children: new ContentChildren(DialogButtonDirective)
                    },
                },] },
    ];
    /** @nocollapse */
    ButtonsDirective.ctorParameters = function () { return []; };
    return ButtonsDirective;
}(ArrayBase));
export { ButtonsDirective };
//# sourceMappingURL=buttons.directive.js.map
{
  "version": 3,
  "file": "ng2-input-autocompleteModule.umd.min.js",
  "sources": [
    "ng://ng2-input-autocompleteModule/src/ng2-input-autocomplete.ts"
  ],
  "sourcesContent": [
    "/*\n  MIT LICENSE @liuy97\n*/\nimport {\n  Component,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  NgModule,\n  ModuleWithProviders,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  SimpleChange,\n  ViewContainerRef\n} from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'ng2-input-autocomplete',\n  template: `\n  <div class=\"autocomplete\">\n    <input type=\"text\"\n      placeholder=\"{{placeholder}}\"\n      (blur)=\"showAutoComplete = false;\"\n      (focus)=\"showAutoComplete = true;\"\n      [value]=\"value\"\n      (keyup)=\"enterText($event)\">\n    <ul *ngIf=\"showAutoComplete && candidates && candidates.length > 0\">\n      <li *ngFor=\"let candidate of candidates; let idx = index\"\n        [ngClass]=\"{ active: (idx === selectedIndex) }\"\n        (mouseover)=\"selectedIndex = idx;\"\n        (mousedown)=\"onSelect(idx)\">\n        {{candiatesLabels[idx]}}\n      </li>\n    </ul>\n  </div>`,\n  styles: [\n    `.autocomplete ul {\n       position: absolute;\n       left: 0;\n       width: 100%;\n       border-left: 1px solid #888;\n       border-right: 1px solid #888;\n       border-bottom: 1px solid #888;\n       list-style: none;\n       padding-left: 0px;\n       margin-top: 2px;\n       background-color: #fff;\n       z-index: 100;\n     }\n     .autocomplete li {\n       text-align: left;\n       list-style: none;\n       width: 100%;\n       padding: 0.4em 0 0.4em 0;\n     }\n     .autocomplete li.active {\n       width: 100%;\n       background-color: #4bf;\n     }\n\n     .autocomplete .highlight {\n       background-color: #e2e2e2;\n     }\n     .autocomplete li.active .highlight {\n       background: #666;\n       color: #fff;\n     }`\n  ]\n})\nexport class AutocompleteComponent implements OnInit, OnChanges {\n  @Input() items: any[];\n  @Input() config: any;\n  @Output() selectEvent: EventEmitter<any> = new EventEmitter<any>();\n  @Output() inputChangedEvent: EventEmitter<any> = new EventEmitter<any>();\n  inputElement: HTMLInputElement;\n  value: string;\n  candidates: any[];\n  candiatesLabels: any[];\n  selectedIndex: number;\n  showAutoComplete: boolean;\n  placeholder: string;\n  private sourceField: any;\n  private thisElement: HTMLElement;\n\n  constructor(elementRef: ElementRef) {\n    this.thisElement = elementRef.nativeElement;\n    this.selectedIndex = 0;\n    this.showAutoComplete = false;\n    this.value = '';\n  }\n\n  ngOnInit() {\n    this.placeholder = 'autocomplete';\n    this.inputElement = this.thisElement.querySelector(\n      'input'\n    ) as HTMLInputElement;\n\n    if (!this.isNull(this.config)) {\n      if (!this.isNull(this.config.placeholder)) {\n        this.placeholder = this.config.placeholder;\n      }\n      if (!this.isNull(this.config.sourceField)) {\n        this.sourceField = this.config.sourceField;\n      }\n    }\n    this.filterItems(this.value);\n    this.inputElement.focus();\n  }\n\n  ngOnChanges() {\n    this.filterItems(this.value);\n  }\n\n  enterText(event: any) {\n    const total = this.candidates.length;\n    switch (event.keyCode) {\n      case 27:\n        this.showAutoComplete = false;\n        break;\n      case 38:\n        this.selectedIndex = (total + this.selectedIndex - 1) % total;\n        break;\n      case 40:\n        this.selectedIndex = (total + this.selectedIndex + 1) % total;\n        break;\n      case 13:\n        if (this.candidates.length > 0) {\n          this.onSelect(this.selectedIndex);\n        }\n        event.preventDefault();\n        break;\n      default:\n        this.value = event.target.value;\n        this.inputChangedEvent.emit(this.value);\n        break;\n    }\n  }\n\n  onSelect(idx: number) {\n    this.showAutoComplete = false;\n    this.value = this.candiatesLabels[idx];\n    this.selectEvent.emit(this.candidates[idx]);\n  }\n\n  filterItems(search: string) {\n    const field = this.sourceField;\n    const filterItem = this.filterItem;\n    if (this.items) {\n      this.candidates = this.items.filter(item => {\n        return filterItem(item, field, search);\n      });\n      this.buildLabels();\n    }\n  }\n\n  private getFieldValue(object: any, path: any) {\n    if (typeof object === 'string') {\n      return object;\n    }\n    if (path instanceof Array) {\n      let result: any = object;\n      path.forEach((element: any) => {\n        if (\n          result !== null &&\n          result !== undefined &&\n          result[element] !== null &&\n          result[element] !== undefined\n        ) {\n          result = result[element];\n        } else {\n          result = '';\n        }\n      });\n      return result;\n    } else {\n      return object[path] || '';\n    }\n  }\n\n  private isNull(object: any) {\n    return object === null || object === undefined;\n  }\n\n  private buildLabels() {\n    const field = this.sourceField;\n    const getFieldValue = this.getFieldValue;\n    this.candiatesLabels = this.candidates.map((e: any) =>\n      getFieldValue(e, field)\n    );\n  }\n\n  private filterItem(item: any, path: any, search: string) {\n    if (search === null || search === undefined || search.length === 0) {\n      return true;\n    }\n    let result: any;\n    if (typeof item === 'string') {\n      result = item;\n    } else if (path instanceof Array) {\n      result = item;\n      path.forEach((element: any) => {\n        if (\n          result !== null &&\n          result !== undefined &&\n          result[element] !== null &&\n          result[element] !== undefined\n        ) {\n          result = result[element];\n        } else {\n          result = '';\n        }\n      });\n    } else {\n      result = item[path] || '';\n    }\n    return result.toLowerCase().indexOf(search.toLowerCase()) >= 0;\n  }\n}\n\n@Directive({\n  selector: '[autocomplete]'\n})\nexport class AutocompleteDirective implements OnInit, OnDestroy, OnChanges {\n  @Input() config: any;\n  @Input() items: any;\n  @Input() ngModel: string;\n  @Output() ngModelChange = new EventEmitter();\n  @Output() inputChangedEvent = new EventEmitter();\n  @Output() selectEvent = new EventEmitter();\n\n  private componentRef: ComponentRef<AutocompleteComponent>;\n  private thisElement: HTMLElement;\n  private autocompleteElement: HTMLElement;\n  private inputElement: HTMLInputElement;\n  private tabIndex: number;\n\n  constructor(\n    private resolver: ComponentFactoryResolver,\n    public viewContainerRef: ViewContainerRef\n  ) {\n    this.thisElement = this.viewContainerRef.element.nativeElement;\n  }\n\n  ngOnInit() {\n    if (this.thisElement.tagName.toLowerCase() === 'form') {\n      return;\n    }\n    this.createDiv();\n  }\n\n  ngOnDestroy() {\n    if (this.componentRef) {\n      this.componentRef.instance.selectEvent.unsubscribe();\n      this.componentRef.instance.inputChangedEvent.unsubscribe();\n    }\n    document.removeEventListener('click', this.hideAutocomplete);\n  }\n\n  ngOnChanges(changes: { [propKey: string]: SimpleChange }) {\n    if (changes['items'] && this.componentRef) {\n      const component = this.componentRef.instance;\n      component.items = changes['items'].currentValue;\n      component.filterItems(component.value);\n    }\n  }\n\n  @HostListener('click', ['$event.target'])\n  @HostListener('focus', ['$event.target'])\n  showAutocomplete(event: any) {\n    this.hideAutocomplete();\n    if (event === this.thisElement) {\n      this.createAutocomplete();\n    }\n  }\n\n  hideAutocomplete = (event?: any): void => {\n    if (!this.componentRef) {\n      return;\n    }\n    if (\n      !event ||\n      (event.target !== this.thisElement && event.type === 'click')\n    ) {\n      this.componentRef.destroy();\n      this.componentRef = undefined;\n    }\n    if (this.inputElement['tabIndex'] < 0) {\n      this.inputElement['tabIndex'] = this.tabIndex;\n    }\n  };\n\n  onInputChanged = (val: string) => {\n    this.inputElement.value = val;\n    if (val !== this.ngModel) {\n      this.ngModelChange.emit(val);\n    }\n    const component = this.componentRef.instance;\n    component.filterItems(val);\n    this.inputChangedEvent.emit(val);\n  };\n\n  onSelect = (item: any) => {\n    const component = this.componentRef.instance;\n    const val = component.value;\n    if (val !== this.ngModel) {\n      this.ngModelChange.emit(val);\n    }\n    this.selectEvent.emit(item);\n    if (this.inputElement) {\n      this.inputElement.value = '' + val;\n    }\n    this.hideAutocomplete();\n  };\n\n  private createDiv() {\n    const element = document.createElement('div');\n    element.style.display = 'inline-block';\n    element.style.position = 'relative';\n    this.thisElement.parentElement.insertBefore(\n      element,\n      this.thisElement.nextSibling\n    );\n    element.appendChild(this.thisElement);\n    document.addEventListener('click', this.hideAutocomplete);\n  }\n\n  private createAutocomplete() {\n    const factory = this.resolver.resolveComponentFactory(\n      AutocompleteComponent\n    );\n    this.componentRef = this.viewContainerRef.createComponent(factory);\n    const component = this.componentRef.instance;\n    component.config = this.config;\n    component.items = this.items;\n    component.selectEvent.subscribe(this.onSelect);\n    component.inputChangedEvent.subscribe(this.onInputChanged);\n    this.autocompleteElement = this.componentRef.location.nativeElement;\n    this.autocompleteElement.style.display = 'none';\n    this.inputElement = this.thisElement as HTMLInputElement;\n    if (this.thisElement.tagName !== 'INPUT' && this.autocompleteElement) {\n      this.inputElement = this.thisElement.querySelector(\n        'input'\n      ) as HTMLInputElement;\n      this.inputElement.parentElement.insertBefore(\n        this.autocompleteElement,\n        this.inputElement.nextSibling\n      );\n    }\n    component.value = this.inputElement.value;\n    this.tabIndex = this.inputElement['tabIndex'];\n    this.inputElement['tabIndex'] = -100;\n    if (this.componentRef) {\n      const rect = this.thisElement.getBoundingClientRect();\n      const style = this.autocompleteElement.style;\n      style.width = rect.width + 'px';\n      style.position = 'absolute';\n      style.zIndex = '1';\n      style.top = '0';\n      style.left = '0';\n      style.display = 'inline-block';\n    }\n  }\n}\n\n@NgModule({\n  imports: [CommonModule, FormsModule],\n  declarations: [AutocompleteComponent, AutocompleteDirective],\n  exports: [AutocompleteComponent, AutocompleteDirective],\n  entryComponents: [AutocompleteComponent]\n})\nexport class AutocompleteModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: AutocompleteModule\n    };\n  }\n}\n"
  ],
  "names": [
    "this",
    "selectEvent",
    "EventEmitter",
    "inputChangedEvent",
    "thisElement",
    "elementRef",
    "nativeElement",
    "selectedIndex",
    "showAutoComplete",
    "value",
    "placeholder",
    "inputElement",
    "querySelector",
    "isNull",
    "config",
    "sourceField",
    "filterItems",
    "focus",
    "total",
    "candidates",
    "length",
    "event",
    "keyCode",
    "onSelect",
    "preventDefault",
    "target",
    "emit",
    "candiatesLabels",
    "idx",
    "field",
    "filterItem",
    "items",
    "filter",
    "item",
    "search",
    "buildLabels",
    "object",
    "path",
    "Array",
    "result_1",
    "forEach",
    "element",
    "undefined",
    "getFieldValue",
    "map",
    "e",
    "result",
    "toLowerCase",
    "indexOf",
    "type",
    "Component",
    "args",
    "selector",
    "template",
    "AutocompleteDirective",
    "_this",
    "val",
    "ngModelChange",
    "hideAutocomplete",
    "viewContainerRef",
    "prototype",
    "ngOnInit",
    "tagName",
    "createDiv",
    "ngOnDestroy",
    "componentRef",
    "instance",
    "unsubscribe",
    "document",
    "removeEventListener",
    "ngOnChanges",
    "changes",
    "component",
    "currentValue",
    "showAutocomplete",
    "createAutocomplete",
    "createElement",
    "appendChild",
    "addEventListener",
    "subscribe",
    "onInputChanged",
    "autocompleteElement",
    "location",
    "style",
    "display",
    "tabIndex",
    "rect",
    "getBoundingClientRect",
    "left",
    "ctorParameters",
    "ComponentFactoryResolver",
    "ViewContainerRef",
    "Output",
    "HostListener",
    "AutocompleteModule",
    "forRoot",
    "ngModule",
    "decorators",
    "NgModule",
    "imports",
    "CommonModule",
    "FormsModule",
    "declarations",
    "AutocompleteComponent",
    "exports",
    "entryComponents"
  ],
  "mappings": "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"
}

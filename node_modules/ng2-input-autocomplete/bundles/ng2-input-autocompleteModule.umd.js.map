{
  "version": 3,
  "file": "ng2-input-autocompleteModule.umd.js",
  "sources": [
    "ng://ng2-input-autocompleteModule/src/ng2-input-autocomplete.ts"
  ],
  "sourcesContent": [
    "/*\n  MIT LICENSE @liuy97\n*/\nimport {\n  Component,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  NgModule,\n  ModuleWithProviders,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  SimpleChange,\n  ViewContainerRef\n} from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'ng2-input-autocomplete',\n  template: `\n  <div class=\"autocomplete\">\n    <input type=\"text\"\n      placeholder=\"{{placeholder}}\"\n      (blur)=\"showAutoComplete = false;\"\n      (focus)=\"showAutoComplete = true;\"\n      [value]=\"value\"\n      (keyup)=\"enterText($event)\">\n    <ul *ngIf=\"showAutoComplete && candidates && candidates.length > 0\">\n      <li *ngFor=\"let candidate of candidates; let idx = index\"\n        [ngClass]=\"{ active: (idx === selectedIndex) }\"\n        (mouseover)=\"selectedIndex = idx;\"\n        (mousedown)=\"onSelect(idx)\">\n        {{candiatesLabels[idx]}}\n      </li>\n    </ul>\n  </div>`,\n  styles: [\n    `.autocomplete ul {\n       position: absolute;\n       left: 0;\n       width: 100%;\n       border-left: 1px solid #888;\n       border-right: 1px solid #888;\n       border-bottom: 1px solid #888;\n       list-style: none;\n       padding-left: 0px;\n       margin-top: 2px;\n       background-color: #fff;\n       z-index: 100;\n     }\n     .autocomplete li {\n       text-align: left;\n       list-style: none;\n       width: 100%;\n       padding: 0.4em 0 0.4em 0;\n     }\n     .autocomplete li.active {\n       width: 100%;\n       background-color: #4bf;\n     }\n\n     .autocomplete .highlight {\n       background-color: #e2e2e2;\n     }\n     .autocomplete li.active .highlight {\n       background: #666;\n       color: #fff;\n     }`\n  ]\n})\nexport class AutocompleteComponent implements OnInit, OnChanges {\n  @Input() items: any[];\n  @Input() config: any;\n  @Output() selectEvent: EventEmitter<any> = new EventEmitter<any>();\n  @Output() inputChangedEvent: EventEmitter<any> = new EventEmitter<any>();\n  inputElement: HTMLInputElement;\n  value: string;\n  candidates: any[];\n  candiatesLabels: any[];\n  selectedIndex: number;\n  showAutoComplete: boolean;\n  placeholder: string;\n  private sourceField: any;\n  private thisElement: HTMLElement;\n\n  constructor(elementRef: ElementRef) {\n    this.thisElement = elementRef.nativeElement;\n    this.selectedIndex = 0;\n    this.showAutoComplete = false;\n    this.value = '';\n  }\n\n  ngOnInit() {\n    this.placeholder = 'autocomplete';\n    this.inputElement = this.thisElement.querySelector(\n      'input'\n    ) as HTMLInputElement;\n\n    if (!this.isNull(this.config)) {\n      if (!this.isNull(this.config.placeholder)) {\n        this.placeholder = this.config.placeholder;\n      }\n      if (!this.isNull(this.config.sourceField)) {\n        this.sourceField = this.config.sourceField;\n      }\n    }\n    this.filterItems(this.value);\n    this.inputElement.focus();\n  }\n\n  ngOnChanges() {\n    this.filterItems(this.value);\n  }\n\n  enterText(event: any) {\n    const total = this.candidates.length;\n    switch (event.keyCode) {\n      case 27:\n        this.showAutoComplete = false;\n        break;\n      case 38:\n        this.selectedIndex = (total + this.selectedIndex - 1) % total;\n        break;\n      case 40:\n        this.selectedIndex = (total + this.selectedIndex + 1) % total;\n        break;\n      case 13:\n        if (this.candidates.length > 0) {\n          this.onSelect(this.selectedIndex);\n        }\n        event.preventDefault();\n        break;\n      default:\n        this.value = event.target.value;\n        this.inputChangedEvent.emit(this.value);\n        break;\n    }\n  }\n\n  onSelect(idx: number) {\n    this.showAutoComplete = false;\n    this.value = this.candiatesLabels[idx];\n    this.selectEvent.emit(this.candidates[idx]);\n  }\n\n  filterItems(search: string) {\n    const field = this.sourceField;\n    const filterItem = this.filterItem;\n    if (this.items) {\n      this.candidates = this.items.filter(item => {\n        return filterItem(item, field, search);\n      });\n      this.buildLabels();\n    }\n  }\n\n  private getFieldValue(object: any, path: any) {\n    if (typeof object === 'string') {\n      return object;\n    }\n    if (path instanceof Array) {\n      let result: any = object;\n      path.forEach((element: any) => {\n        if (\n          result !== null &&\n          result !== undefined &&\n          result[element] !== null &&\n          result[element] !== undefined\n        ) {\n          result = result[element];\n        } else {\n          result = '';\n        }\n      });\n      return result;\n    } else {\n      return object[path] || '';\n    }\n  }\n\n  private isNull(object: any) {\n    return object === null || object === undefined;\n  }\n\n  private buildLabels() {\n    const field = this.sourceField;\n    const getFieldValue = this.getFieldValue;\n    this.candiatesLabels = this.candidates.map((e: any) =>\n      getFieldValue(e, field)\n    );\n  }\n\n  private filterItem(item: any, path: any, search: string) {\n    if (search === null || search === undefined || search.length === 0) {\n      return true;\n    }\n    let result: any;\n    if (typeof item === 'string') {\n      result = item;\n    } else if (path instanceof Array) {\n      result = item;\n      path.forEach((element: any) => {\n        if (\n          result !== null &&\n          result !== undefined &&\n          result[element] !== null &&\n          result[element] !== undefined\n        ) {\n          result = result[element];\n        } else {\n          result = '';\n        }\n      });\n    } else {\n      result = item[path] || '';\n    }\n    return result.toLowerCase().indexOf(search.toLowerCase()) >= 0;\n  }\n}\n\n@Directive({\n  selector: '[autocomplete]'\n})\nexport class AutocompleteDirective implements OnInit, OnDestroy, OnChanges {\n  @Input() config: any;\n  @Input() items: any;\n  @Input() ngModel: string;\n  @Output() ngModelChange = new EventEmitter();\n  @Output() inputChangedEvent = new EventEmitter();\n  @Output() selectEvent = new EventEmitter();\n\n  private componentRef: ComponentRef<AutocompleteComponent>;\n  private thisElement: HTMLElement;\n  private autocompleteElement: HTMLElement;\n  private inputElement: HTMLInputElement;\n  private tabIndex: number;\n\n  constructor(\n    private resolver: ComponentFactoryResolver,\n    public viewContainerRef: ViewContainerRef\n  ) {\n    this.thisElement = this.viewContainerRef.element.nativeElement;\n  }\n\n  ngOnInit() {\n    if (this.thisElement.tagName.toLowerCase() === 'form') {\n      return;\n    }\n    this.createDiv();\n  }\n\n  ngOnDestroy() {\n    if (this.componentRef) {\n      this.componentRef.instance.selectEvent.unsubscribe();\n      this.componentRef.instance.inputChangedEvent.unsubscribe();\n    }\n    document.removeEventListener('click', this.hideAutocomplete);\n  }\n\n  ngOnChanges(changes: { [propKey: string]: SimpleChange }) {\n    if (changes['items'] && this.componentRef) {\n      const component = this.componentRef.instance;\n      component.items = changes['items'].currentValue;\n      component.filterItems(component.value);\n    }\n  }\n\n  @HostListener('click', ['$event.target'])\n  @HostListener('focus', ['$event.target'])\n  showAutocomplete(event: any) {\n    this.hideAutocomplete();\n    if (event === this.thisElement) {\n      this.createAutocomplete();\n    }\n  }\n\n  hideAutocomplete = (event?: any): void => {\n    if (!this.componentRef) {\n      return;\n    }\n    if (\n      !event ||\n      (event.target !== this.thisElement && event.type === 'click')\n    ) {\n      this.componentRef.destroy();\n      this.componentRef = undefined;\n    }\n    if (this.inputElement['tabIndex'] < 0) {\n      this.inputElement['tabIndex'] = this.tabIndex;\n    }\n  };\n\n  onInputChanged = (val: string) => {\n    this.inputElement.value = val;\n    if (val !== this.ngModel) {\n      this.ngModelChange.emit(val);\n    }\n    const component = this.componentRef.instance;\n    component.filterItems(val);\n    this.inputChangedEvent.emit(val);\n  };\n\n  onSelect = (item: any) => {\n    const component = this.componentRef.instance;\n    const val = component.value;\n    if (val !== this.ngModel) {\n      this.ngModelChange.emit(val);\n    }\n    this.selectEvent.emit(item);\n    if (this.inputElement) {\n      this.inputElement.value = '' + val;\n    }\n    this.hideAutocomplete();\n  };\n\n  private createDiv() {\n    const element = document.createElement('div');\n    element.style.display = 'inline-block';\n    element.style.position = 'relative';\n    this.thisElement.parentElement.insertBefore(\n      element,\n      this.thisElement.nextSibling\n    );\n    element.appendChild(this.thisElement);\n    document.addEventListener('click', this.hideAutocomplete);\n  }\n\n  private createAutocomplete() {\n    const factory = this.resolver.resolveComponentFactory(\n      AutocompleteComponent\n    );\n    this.componentRef = this.viewContainerRef.createComponent(factory);\n    const component = this.componentRef.instance;\n    component.config = this.config;\n    component.items = this.items;\n    component.selectEvent.subscribe(this.onSelect);\n    component.inputChangedEvent.subscribe(this.onInputChanged);\n    this.autocompleteElement = this.componentRef.location.nativeElement;\n    this.autocompleteElement.style.display = 'none';\n    this.inputElement = this.thisElement as HTMLInputElement;\n    if (this.thisElement.tagName !== 'INPUT' && this.autocompleteElement) {\n      this.inputElement = this.thisElement.querySelector(\n        'input'\n      ) as HTMLInputElement;\n      this.inputElement.parentElement.insertBefore(\n        this.autocompleteElement,\n        this.inputElement.nextSibling\n      );\n    }\n    component.value = this.inputElement.value;\n    this.tabIndex = this.inputElement['tabIndex'];\n    this.inputElement['tabIndex'] = -100;\n    if (this.componentRef) {\n      const rect = this.thisElement.getBoundingClientRect();\n      const style = this.autocompleteElement.style;\n      style.width = rect.width + 'px';\n      style.position = 'absolute';\n      style.zIndex = '1';\n      style.top = '0';\n      style.left = '0';\n      style.display = 'inline-block';\n    }\n  }\n}\n\n@NgModule({\n  imports: [CommonModule, FormsModule],\n  declarations: [AutocompleteComponent, AutocompleteDirective],\n  exports: [AutocompleteComponent, AutocompleteDirective],\n  entryComponents: [AutocompleteComponent]\n})\nexport class AutocompleteModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: AutocompleteModule\n    };\n  }\n}\n"
  ],
  "names": [
    "CommonModule",
    "FormsModule",
    "NgModule",
    "HostListener",
    "Output",
    "ViewContainerRef",
    "ComponentFactoryResolver",
    "Component",
    "EventEmitter"
  ],
  "mappings": "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"
}

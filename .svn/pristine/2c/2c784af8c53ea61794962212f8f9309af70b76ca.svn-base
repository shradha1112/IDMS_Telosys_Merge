/*
 * Created on 2019-05-02 ( Date ISO 2019-05-02 - Time 11:00:43 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */
package com.cpa.ehr.backend.dao.system.entities;
import java.io.Serializable;
import java.util.Date;
import javax.persistence.*;

@Entity
@Table(name="patient_preventive_care", schema="ehr" )
public class PatientPreventiveCare implements Serializable {

	private static final long serialVersionUID = 1L;

	//----------------------------------------------------------------------
	// ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
	//----------------------------------------------------------------------
	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "sequenceGenerator")
	@SequenceGenerator(name = "sequenceGenerator", sequenceName = "patient_preventive_care_id_seq", allocationSize=1)
	@Column(name = "patient_preventive_care_id", nullable = false)
	private Long patientPreventiveCareId ; 
	//----------------------------------------------------------------------
	// ENTITY DATA FIELDS 
	//----------------------------------------------------------------------    

	@Column(name="patient_id", nullable=false)
	private Long patientId ;     
	@Column(name="preventive_care_id", nullable=false)
	private Long preventiveCareId ;     
	@Column(name="test_name", nullable=false, length=500)
	private String testName ;    
	@Column(name="age", nullable=false, length=50)
	private String age ;    
	@Column(name="gender", nullable=false, length=50)
	private String gender ;     
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name="date_last_done")
	private Date dateLastDone ;     
	@Column(name="frequency", length=50)
	private String frequency ;    
	@Column(name="recurring_event", length=10)
	private String recurringEvent ;    
	@Column(name="reminder_email_date", length=500)
	private String reminderEmailDate ;     
	@Column(name="active_flag", nullable=false, length=1)
	private String activeFlag ;     
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name="created_date")
	private Date createdDate ;     
	@Column(name="created_by", length=100)
	private String createdBy ;     
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name="last_updated_date")
	private Date lastUpdatedDate ;     
	@Column(name="last_updated_by", length=100)
	private String lastUpdatedBy ; 


	//----------------------------------------------------------------------
	// CONSTRUCTOR(S)
	//----------------------------------------------------------------------
	public PatientPreventiveCare() {
		super();
	}

	//----------------------------------------------------------------------
	// GETTER & SETTER FOR THE KEY FIELD
	//----------------------------------------------------------------------
	public void setPatientPreventiveCareId(Long patientPreventiveCareId) {
		this.patientPreventiveCareId = patientPreventiveCareId ;
	}
	public Long getPatientPreventiveCareId() {
		return this.patientPreventiveCareId;
	}

	//----------------------------------------------------------------------
	// GETTERS & SETTERS FOR FIELDS
	//----------------------------------------------------------------------
	//--- DATABASE MAPPING : patient_id (int8) 
	public void setPatientId(Long patientId)
	{this.patientId = patientId;}


	public Long getPatientId()
	{return this.patientId;}



	//--- DATABASE MAPPING : preventive_care_id (int8) 
	public void setPreventiveCareId(Long preventiveCareId)
	{this.preventiveCareId = preventiveCareId;}


	public Long getPreventiveCareId()
	{return this.preventiveCareId;}



	//--- DATABASE MAPPING : test_name (varchar) 
	public void setTestName(String testName)
	{this.testName = testName;}


	public String getTestName()
	{return this.testName;}



	//--- DATABASE MAPPING : age (varchar) 
	public void setAge(String age)
	{this.age = age;}


	public String getAge()
	{return this.age;}



	//--- DATABASE MAPPING : gender (varchar) 
	public void setGender(String gender)
	{this.gender = gender;}


	public String getGender()
	{return this.gender;}



	//--- DATABASE MAPPING : date_last_done (timestamp) 
	public void setDateLastDone(Date dateLastDone)
	{this.dateLastDone = dateLastDone;}


	public Date getDateLastDone()
	{return this.dateLastDone;}



	//--- DATABASE MAPPING : frequency (varchar) 
	public void setFrequency(String frequency)
	{this.frequency = frequency;}


	public String getFrequency()
	{return this.frequency;}



	//--- DATABASE MAPPING : recurring_event (varchar) 
	public void setRecurringEvent(String recurringEvent)
	{this.recurringEvent = recurringEvent;}


	public String getRecurringEvent()
	{return this.recurringEvent;}



	//--- DATABASE MAPPING : reminder_email_date (varchar) 
	public void setReminderEmailDate(String reminderEmailDate)
	{this.reminderEmailDate = reminderEmailDate;}


	public String getReminderEmailDate()
	{return this.reminderEmailDate;}



	//--- DATABASE MAPPING : active_flag (varchar) 
	public void setActiveFlag(String activeFlag)
	{this.activeFlag = activeFlag;}


	public String getActiveFlag()
	{return this.activeFlag;}



	//--- DATABASE MAPPING : created_date (timestamp) 
	public void setCreatedDate(Date createdDate)
	{this.createdDate = createdDate;}


	public Date getCreatedDate()
	{return this.createdDate;}



	//--- DATABASE MAPPING : created_by (varchar) 
	public void setCreatedBy(String createdBy)
	{this.createdBy = createdBy;}


	public String getCreatedBy()
	{return this.createdBy;}



	//--- DATABASE MAPPING : last_updated_date (timestamp) 
	public void setLastUpdatedDate(Date lastUpdatedDate)
	{this.lastUpdatedDate = lastUpdatedDate;}


	public Date getLastUpdatedDate()
	{return this.lastUpdatedDate;}



	//--- DATABASE MAPPING : last_updated_by (varchar) 
	public void setLastUpdatedBy(String lastUpdatedBy)
	{this.lastUpdatedBy = lastUpdatedBy;}


	public String getLastUpdatedBy()
	{return this.lastUpdatedBy;}





	//----------------------------------------------------------------------
	// toString METHOD
	//----------------------------------------------------------------------
	public String toString() {
		StringBuilder sb = new StringBuilder(); 
		sb.append("PatientPreventiveCare");
		sb.append("patientPreventiveCareId :");
		sb.append(patientPreventiveCareId); 
		sb.append("patientId :");
		sb.append(patientId); 
		sb.append("|"); 
		sb.append("preventiveCareId :");
		sb.append(preventiveCareId); 
		sb.append("|"); 
		sb.append("testName :");
		sb.append(testName); 
		sb.append("|"); 
		sb.append("age :");
		sb.append(age); 
		sb.append("|"); 
		sb.append("gender :");
		sb.append(gender); 
		sb.append("|"); 
		sb.append("dateLastDone :");
		sb.append(dateLastDone); 
		sb.append("|"); 
		sb.append("frequency :");
		sb.append(frequency); 
		sb.append("|"); 
		sb.append("recurringEvent :");
		sb.append(recurringEvent); 
		sb.append("|"); 
		sb.append("reminderEmailDate :");
		sb.append(reminderEmailDate); 
		sb.append("|"); 
		sb.append("activeFlag :");
		sb.append(activeFlag); 
		sb.append("|"); 
		sb.append("createdDate :");
		sb.append(createdDate); 
		sb.append("|"); 
		sb.append("createdBy :");
		sb.append(createdBy); 
		sb.append("|"); 
		sb.append("lastUpdatedDate :");
		sb.append(lastUpdatedDate); 
		sb.append("|"); 
		sb.append("lastUpdatedBy :");
		sb.append(lastUpdatedBy); 
		return sb.toString();
	}
}
import { Injectable } from '@angular/core';
import { Http, Response, Headers, RequestOptions, URLSearchParams } from '@angular/http';
import { Observable } from 'rxjs';
import { Template } from '../models/template';
import { AppSettings } from 'app/appsettings';

@Injectable()
export class TemplateService {

    addTemplateUrl = AppSettings.API_ENDPOINT + "./template/createTemplate";
    getAllActiveTemplatesUrl = AppSettings.API_ENDPOINT + "./template/getAllActiveTemplates";
    getActiveTemplateBySystemIdUrl = AppSettings.API_ENDPOINT + "./template/getActiveTemplateBySystemId";

    constructor(private http: Http) {}

    //insert encounter
    insertTemplate(template: Template): Observable<Template> {
        let cpHeaders = new Headers({ 'Content-Type': 'application/json', "x-auth-token": localStorage.getItem('jwt') });
        let options = new RequestOptions({ headers: cpHeaders });
        return this.http.post(this.addTemplateUrl, template, options)
            .map(this.extractData)
            .catch(this.handleError);
    }

    getAllActiveTemplates(): Observable<Template[]> {
        let cpHeaders = new Headers({ 'Content-Type': 'application/json', "x-auth-token": localStorage.getItem('jwt') });
        let options = new RequestOptions({ headers: cpHeaders });
        return this.http.get(this.getAllActiveTemplatesUrl, options)
            .map(this.extractData)
            .catch(this.handleError);
    }

    getActiveTemplateBySystemId(systemId:number): Observable<Template> {
        let cpHeaders = new Headers({ 'Content-Type': 'application/json', "x-auth-token": localStorage.getItem('jwt') });
        let cpParams = new URLSearchParams();
		cpParams.set('systemId', systemId.toString());
		let options = new RequestOptions({ headers: cpHeaders, params: cpParams });
        return this.http.get(this.getActiveTemplateBySystemIdUrl, options)
            .map(this.extractData)
            .catch(this.handleError);
    }

    private extractData(res: Response) {
        let body = res.json();
        return body;
    }

    private handleError(error: Response | any) {
        console.error(error.message || error);
        return Observable.throw(error.status);
    }
}
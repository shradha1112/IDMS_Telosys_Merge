/*
 * Created on 2019-04-25 ( Date ISO 2019-04-25 - Time 10:19:38 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.cpa.ehr.backend.dao.system.entities;
import java.io.Serializable;
import java.util.Date;
import javax.persistence.*;

/**
 * Persistent class for PatientAllergy entity stored in table patient_allergy.
 * This class is a "record entity" without JPA links.
 * 
 * @author Somesh Biswas version 3.0.0
 */
@Entity
@Table(name = "patient_allergy", schema = "ehr")
public class PatientAllergy implements Serializable {

	private static final long serialVersionUID = 1L;

	// ----------------------------------------------------------------------
	// ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
	// ----------------------------------------------------------------------
	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "sequenceGenerator")
	@SequenceGenerator(name = "sequenceGenerator", sequenceName = "patient_allergy_id_seq", allocationSize=1)
	@Column(name = "patient_allergy_id", nullable = false)
	private Long patientAllergyId;
	// ----------------------------------------------------------------------
	// ENTITY DATA FIELDS
	// ----------------------------------------------------------------------
	@Column(name = "product_name", length = 200)
	private String productName;
	@Column(name = "form", length = 2147483647)
	private String form;
	@Column(name = "route", length = 2147483647)
	private String route;
	@Column(name = "dose", length = 200)
	private String dose;
	@Column(name = "active_flag", length = 1)
	private String activeFlag;
	@Column(name = "medication_id", nullable = false)
	private Long medicationId;
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_date", nullable = false)
	private Date createdDate;
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_updated_date", nullable = false)
	private Date lastUpdatedDate;
	@Column(name = "created_by", nullable = false, length = 255)
	private String createdBy;
	@Column(name = "last_updated_by", nullable = false, length = 255)
	private String lastUpdatedBy;
	@Column(name = "encounter_id", nullable = false)
	private Long encounterId;
	@Column(name = "patient_id", nullable = false)
	private Long patientId;

	// ----------------------------------------------------------------------
	// CONSTRUCTOR(S)
	// ----------------------------------------------------------------------
	public PatientAllergy() {
		super();
	}

	// ----------------------------------------------------------------------
	// GETTER & SETTER FOR THE KEY FIELD
	// ----------------------------------------------------------------------
	public void setPatientAllergyId(Long patientAllergyId) {
		this.patientAllergyId = patientAllergyId;
	}

	public Long getPatientAllergyId() {
		return this.patientAllergyId;
	}

	// ----------------------------------------------------------------------
	// GETTERS & SETTERS FOR FIELDS
	// ----------------------------------------------------------------------
	// --- DATABASE MAPPING : product_name (varchar)
	public void setProductName(String productName) {
		this.productName = productName;
	}

	public String getProductName() {
		return this.productName;
	}

	// --- DATABASE MAPPING : form (varchar)
	public void setForm(String form) {
		this.form = form;
	}

	public String getForm() {
		return this.form;
	}

	// --- DATABASE MAPPING : route (varchar)
	public void setRoute(String route) {
		this.route = route;
	}

	public String getRoute() {
		return this.route;
	}

	// --- DATABASE MAPPING : dose (varchar)
	public void setDose(String dose) {
		this.dose = dose;
	}

	public String getDose() {
		return this.dose;
	}

	// --- DATABASE MAPPING : active_flag (varchar)
	public void setActiveFlag(String activeFlag) {
		this.activeFlag = activeFlag;
	}

	public String getActiveFlag() {
		return this.activeFlag;
	}

	// --- DATABASE MAPPING : medication_id (int8)
	public void setMedicationId(Long medicationId) {
		this.medicationId = medicationId;
	}

	public Long getMedicationId() {
		return this.medicationId;
	}

	// --- DATABASE MAPPING : created_date (timestamp)
	public void setCreatedDate(Date createdDate) {
		this.createdDate = createdDate;
	}

	public Date getCreatedDate() {
		return this.createdDate;
	}

	// --- DATABASE MAPPING : last_updated_date (timestamp)
	public void setLastUpdatedDate(Date lastUpdatedDate) {
		this.lastUpdatedDate = lastUpdatedDate;
	}

	public Date getLastUpdatedDate() {
		return this.lastUpdatedDate;
	}

	// --- DATABASE MAPPING : created_by (varchar)
	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	public String getCreatedBy() {
		return this.createdBy;
	}

	// --- DATABASE MAPPING : last_updated_by (varchar)
	public void setLastUpdatedBy(String lastUpdatedBy) {
		this.lastUpdatedBy = lastUpdatedBy;
	}

	public String getLastUpdatedBy() {
		return this.lastUpdatedBy;
	}

	// --- DATABASE MAPPING : encounter_id (int8)
	public void setEncounterId(Long encounterId) {
		this.encounterId = encounterId;
	}

	public Long getEncounterId() {
		return this.encounterId;
	}

	// --- DATABASE MAPPING : patient_id (int8)
	public void setPatientId(Long patientId) {
		this.patientId = patientId;
	}

	public Long getPatientId() {
		return this.patientId;
	}

	// ----------------------------------------------------------------------
	// toString METHOD
	// ----------------------------------------------------------------------
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append(patientAllergyId);
		sb.append(productName);
		sb.append("|");
		sb.append(form);
		sb.append("|");
		sb.append(route);
		sb.append("|");
		sb.append(dose);
		sb.append("|");
		sb.append(activeFlag);
		sb.append("|");
		sb.append(medicationId);
		sb.append("|");
		sb.append(createdDate);
		sb.append("|");
		sb.append(lastUpdatedDate);
		sb.append("|");
		sb.append(createdBy);
		sb.append("|");
		sb.append(lastUpdatedBy);
		sb.append("|");
		sb.append(encounterId);
		sb.append("|");
		sb.append(patientId);
		return sb.toString();
	}
}
package com.cpa.ehr.service.admin.impl;

import java.util.Collections;
import java.util.Date;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cpa.ehr.backend.dao.admin.ClinicLocationRepository;
import com.cpa.ehr.backend.dao.admin.OrganizationRepository;
import com.cpa.ehr.backend.dao.admin.StaffMemberRepository;
import com.cpa.ehr.backend.dao.admin.entities.ClinicLocation;
import com.cpa.ehr.backend.dao.admin.entities.Organization;
import com.cpa.ehr.backend.dao.admin.entities.StaffMember;
import com.cpa.ehr.backend.dao.patients.PatientDetailsRepository;
import com.cpa.ehr.backend.dao.patients.entities.PatientDetails;
import com.cpa.ehr.service.admin.EHRBaseService;
import com.cpa.ehr.service.admin.StaffMemberService;
import com.cpa.ehr.service.admin.dto.StaffMemberDTO;
import com.cpa.ehr.service.admin.dto.mapper.StaffMemberMapper;
import com.cpa.ehr.util.FormatConverterUtils;



/**
 * Implementation for the StaffMember Service
 * 
 * StaffMemberService holds all the interfaces
 * supported for performing CRUD operations against 
 * StaffMember Entity 
 * 
 * @author CPA Development Team
 * @version 1.0.0
 */
@Service
public class StaffMemberServiceImpl implements StaffMemberService {
	private static final Logger LOG = LoggerFactory.getLogger(StaffMemberServiceImpl.class);
	
	@Autowired
	private StaffMemberRepository staffMemberRepo;
	
	@Autowired
	private OrganizationRepository orgRepo;

	@Autowired
	private ClinicLocationRepository clinicLocRepo;
	
	@Autowired
	private PatientDetailsRepository patientDetailsRepo;
	
	@Autowired
	private StaffMemberMapper staffMemberMapper;
	
	@Autowired
	private EHRBaseService ehrBaseService;
	
	@Override
	public StaffMemberDTO persistStaffMember(StaffMemberDTO staffMemberDTO) {
		try {
			if(staffMemberDTO != null) {
				StaffMember staffMemberToInsert = staffMemberMapper.staffMemberDTOToEntity(staffMemberDTO);
				StaffMember insertedStaffMember = staffMemberRepo.save(staffMemberToInsert);
				return (insertedStaffMember != null) ? staffMemberMapper.entityToStaffMemberDTO(insertedStaffMember) : null;
			}
		}
		catch (Exception e){
			LOG.error("Error while inserting staff Member {} ", e);
		}
		return null;
	}
	
	/**
	 * Retrieves list of all StaffMembers
	 * 
	 * @return List of all StaffMembers
	 */
	@Override
	public List<StaffMemberDTO> retrieveAllStaffMembers() {
		try {
			List<StaffMember> staffMemberList = staffMemberRepo.findAllActiveStaffMembers();
			return (staffMemberList != null) ? staffMemberMapper.entityListToStaffMemberDTOList(staffMemberList) : null;
		}
		catch (Exception e){
			LOG.error("Error while retrieving all staff members {} ", e);
		}
		return Collections.emptyList();
	}
	

	public StaffMember findByEmail(String email){
        return staffMemberRepo.findByEmail(email);
    }


	

	
	@Override
	public void updatePassword(String password, Long staffId) {
		StaffMember staff = staffMemberRepo.findOne(staffId);
		if (staff != null) {
			staff.setLoginKey(password);
			staffMemberRepo.saveAndFlush(staff);
		}
	}
	
	@Override
	public List<StaffMemberDTO> retrieveAllPrimaryProvider() {
			try {
				List<StaffMember> primaryProviderList = staffMemberRepo.findAllPrimaryProvider();
				return (primaryProviderList != null) ? staffMemberMapper.entityListToStaffMemberDTOList(primaryProviderList) : null;
			}
			catch (Exception e){
				LOG.error("Error while retrieving all primary provider {} ", e);
			}
			return Collections.emptyList();
	}	
	
	@Override
	public StaffMemberDTO retrieveStaffMemberById(Long staffId){
		try {
			StaffMember staffMember = staffMemberRepo.findActiveOneByStaffMemberId(staffId);
			return (staffMember != null) ? staffMemberMapper.entityToStaffMemberDTO(staffMember) : null;
		}
		catch(Exception e) {
			LOG.error("Error while retrieving selected staff member {}" , e);
		}
		return null;
		
	}
	
	@Override
	public StaffMemberDTO updateStaffMemberById(StaffMemberDTO staffMemberDTOToUpdate) {
		
		StaffMember staffMemberToUpdate = staffMemberRepo.findOne(staffMemberDTOToUpdate.getStaffId());
		//Check whether the correct organization & Clinic Location exists
		//before updating Staff Member Info
		Organization org = orgRepo.findActiveOneByOrganizationId(staffMemberDTOToUpdate.getOrganizationId());
		ClinicLocation clinicLoc = clinicLocRepo.findOne(staffMemberDTOToUpdate.getClinicLocationId());
		if ( staffMemberToUpdate != null && org != null && clinicLoc != null ) {
			
			// Update every field except Organization, Clinic Location,  Created By & Created Date fields
			// !!! -- Staff Member once created for an Org should not be
			// reassigned to another Org -- !!!
			staffMemberToUpdate.setClinicLocation(clinicLoc);
			staffMemberToUpdate.setActiveFlag(FormatConverterUtils.convertBooleantoActiveFlag(staffMemberDTOToUpdate.getActiveFlag()));
			staffMemberToUpdate.setBusinessPhoneNo(staffMemberDTOToUpdate.getBusinessPhoneNo());
			staffMemberToUpdate.setDesignation(staffMemberDTOToUpdate.getDesignation());
			staffMemberToUpdate.setEmail(staffMemberDTOToUpdate.getEmail());
			staffMemberToUpdate.setFirstName(staffMemberDTOToUpdate.getFirstName());
			staffMemberToUpdate.setLastAction(staffMemberDTOToUpdate.getLastAction());
			staffMemberToUpdate.setLastActionDate(staffMemberDTOToUpdate.getLastActionDate());
			staffMemberToUpdate.setLastClient(staffMemberDTOToUpdate.getLastClient());
			staffMemberToUpdate.setLastLoginDate(staffMemberDTOToUpdate.getLastLoginDate());
			staffMemberToUpdate.setLastName(staffMemberDTOToUpdate.getLastName());
			staffMemberToUpdate.setLoginId(staffMemberDTOToUpdate.getLoginId());
			staffMemberToUpdate.setLoginKey(staffMemberDTOToUpdate.getLoginKey());
			staffMemberToUpdate.setMiddleName(staffMemberDTOToUpdate.getMiddleName());
			staffMemberToUpdate.setMobileNo(staffMemberDTOToUpdate.getMobileNo());
			staffMemberToUpdate.setProviderFlag(staffMemberDTOToUpdate.getProviderFlag());
			staffMemberToUpdate.setProviderType(staffMemberDTOToUpdate.getProviderType());
			staffMemberToUpdate.setStaffId(staffMemberDTOToUpdate.getStaffId());
			staffMemberToUpdate.setNpiNumber(staffMemberDTOToUpdate.getNpiNumber());
			staffMemberToUpdate.setStaffImage(staffMemberDTOToUpdate.getStaffImage());
			staffMemberToUpdate.setLastUpdatedBy(staffMemberDTOToUpdate.getLastUpdatedBy());
			staffMemberToUpdate.setLastUpdatedDate(staffMemberDTOToUpdate.getLastUpdatedDate());
			staffMemberToUpdate.setLicenseState(staffMemberDTOToUpdate.getLicenseState());
			staffMemberToUpdate.setLicenseNumber(staffMemberDTOToUpdate.getLicenseNumber());
			staffMemberToUpdate.setLicenseExpDate(staffMemberDTOToUpdate.getLicenseExpDate());
			staffMemberToUpdate.setDeaNumber(staffMemberDTOToUpdate.getDeaNumber());
			staffMemberToUpdate.setDeaExpDate(staffMemberDTOToUpdate.getDeaExpDate());
			staffMemberToUpdate.setMalpracticeCoverage(staffMemberDTOToUpdate.getMalpracticeCoverage());
			staffMemberToUpdate.setMalpracticeExpiration(staffMemberDTOToUpdate.getMalpracticeExpiration());
			staffMemberToUpdate.setDob(staffMemberDTOToUpdate.getDob());
			staffMemberToUpdate.setGender(staffMemberDTOToUpdate.getGender());
			staffMemberToUpdate.setSsn(staffMemberDTOToUpdate.getSsn());
			StaffMember updatedStaffMember = staffMemberRepo.save(staffMemberToUpdate);
			return (updatedStaffMember != null) ? staffMemberMapper.entityToStaffMemberDTO(updatedStaffMember) : null;
		}
		return null;
	}
	
	
	@Override
	public boolean checkStaffMemberInUse(Long staffId){
		try {
			List<PatientDetails> patientList = patientDetailsRepo.getPatientsByStaffId(staffId);
			if(patientList.isEmpty()) {
				return true;
			}
		}
		 catch (Exception e){
			 LOG.error("Error while checking staff already in use or not {}" ,e);
		 }
		return false;
	}

	
	@Override
	public Long removeStaffMemberById(Long staffId) {
	try {
		StaffMember loginUser = ehrBaseService.currentUser();
		StaffMember staffMemberToDelete = staffMemberRepo.findOne(staffId);
			if (staffMemberToDelete != null) {
				
				staffMemberToDelete.setLastUpdatedBy(loginUser.getLoginId());
				staffMemberToDelete.setLastUpdatedDate(new Date());
				staffMemberToDelete.setActiveFlag("N");
				staffMemberRepo.saveAndFlush(staffMemberToDelete);
			}	
		}
		catch(Exception e) {
			LOG.error("Error while removing staff Member  {}" ,e);
		}
	return staffId;
	
	}
}
	
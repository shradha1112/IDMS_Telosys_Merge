import { Component, OnInit, Pipe, PipeTransform } from '@angular/core';
import { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { PatientDetailsService } from 'app/patients/services/patientDetailsService';
import { ClinicLocationService } from 'app/administration/clinic-locations/clinicLocationService';
import { ClinicLocation } from 'app/administration/clinic-locations/ClinicLocation';
import { StaffDetails } from 'app/administration/staff-members/StaffDetails';
import { StaffDetailsService } from 'app/administration/staff-members/staffDetailsService';
import { MasterLookup } from 'app/administration/master-lookup/masterLookup';
import { MasterLookupService } from 'app/administration/master-lookup/masterLookupService';
import { Base64 } from 'js-base64';
import { PatientDetails } from '../models/PatientDetails';
import { Data } from 'app/data';
import * as moment from 'moment';
import { DatePipe } from '@angular/common';
import { NgxSpinnerService } from 'ngx-spinner';

declare const $: any;

@Component({
    selector: 'ehr-newpatient',
    templateUrl: 'newpatient.component.html',
    styleUrls: ['../patient.component.css', '../../app.component.css']
})

export class NewPatientComponent implements OnInit {
    dob = new FormControl('', Validators.required);
    AddPatientForm: FormGroup;
    AddInsuranceForm: FormGroup;
    patientAddressState_search: string = '';
    additionalInfo_search: string = '';
    patientAddressId_search: string = '';
    staffId_search: string = '';
    allProvider: StaffDetails[];
    allCliniclocations: ClinicLocation[];
    isNotValidImageSize: boolean = false;
    statusCode: number;
    allStates: MasterLookup[];
    allTitles: MasterLookup[];
    allLanguages: MasterLookup[];
    allRace: MasterLookup[];
    allEthnicity: MasterLookup[];
    alladditionalInfo: MasterLookup[];
    patientImage: any;
    isValid = false;
    value=false;
    datePattern = /^(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\d\d$/;

    getErrorMessage() {
        return this.dob.hasError('required') ? 'Please select DOB' : '';
    }

    constructor(private formBuilder: FormBuilder,
        private router: Router,
        private patientDetailsService: PatientDetailsService,
        private masterLookupService: MasterLookupService,
        private staffDetailsService: StaffDetailsService,
        private clinicLocationService: ClinicLocationService,
        private sharedData: Data, private datePipe: DatePipe,
        private spinner: NgxSpinnerService
    ) { }

    isFieldValid(form: FormGroup, field: string) {
        return !form.get(field).valid && form.get(field).touched;
    }

    displayFieldCss(form: FormGroup, field: string) {
        return {
            'has-error': this.isFieldValid(form, field),
            'has-feedback': this.isFieldValid(form, field)
        };
    }

    ngOnInit() {

        $('#dob').mask('00/00/0000');
        $('#ssn').mask('000-00-0000');
        $('#patientAddressZip').mask('00000');
        $('#primaryNo').mask('000-000-0000');
        $('#secondaryNo').mask('000-000-0000');
        $('#PInsSsn').mask('000-000-0000');
        $('#SInsSsn').mask('000-000-0000');
        
        this.AddPatientForm = this.formBuilder.group({
            title: [null, [Validators.required]],
            firstName: [null, [Validators.required,Validators.maxLength(50)]],
            middleName: [null],
            lastName: [null, [Validators.required,Validators.maxLength(50)]],
            gender: [null, [Validators.required]],
            dob: [null, [Validators.required]],
            age: [null],
            ssn: [null, [Validators.required,Validators.minLength(11)]],
            buildingNo:[null,[Validators.pattern("[0-9_ ]+$"),Validators.maxLength(25)]],
            primaryEmail: [null, [Validators.required, Validators.pattern(".+@.+\\.[a-z]+"),Validators.maxLength(200)]],
            secondaryEmail: [null, [Validators.pattern(".+@.+\\.[a-z]+")]],
            primaryNo: [null, [Validators.required,Validators.minLength(12)]],
            secondaryNo: [null,[Validators.minLength(12)]],
            patientAddressStreet: [null, [Validators.required,Validators.pattern("[a-zA-Z0-9_ ]+$"),Validators.maxLength(100)]],
            patientAddressDoorNo: [null,[Validators.maxLength(25)]],
            patientAddressCity: [null, [Validators.required,Validators.pattern("[a-zA-Z ]*"),Validators.maxLength(50)]],
            patientAddressState: [null, [Validators.required]],
            patientAddressZip: [null, [Validators.required,Validators.minLength(5)]],
            staffId: [null, [Validators.required]],
            patientAddressId: [null],
            additionalInfo: [null, [Validators.required]],
            PInsRelationship:[null],
            SInsRelationship:[null],
            PInsName:[null,[Validators.required]],
            SInsName:[null],
            PInsCompany:[null],
            SInsCompany:[null],
            PInsPlanName:[null],
            SInsPlanName:[null],
            PInsId:[null],
            SInsId:[null],
            PInsGroup:[null],
            SInsGroup:[null],
            PInsDob:[null,[Validators.required]],
            SInsDob:[null],
            licenseNo:[null,[Validators.pattern("^[a-zA-Z0-9_ ]+$"),Validators.maxLength(50)]],
            PInsSsn:[null, [Validators.required,Validators.minLength(12)]],
            SInsSsn:[null, [Validators.minLength(12)]],
            PInsEmployer:[null],
            SInsEmployer:[null],
            race:[null, [Validators.required]],
            ethnicity:[null, [Validators.required]],
            patientLanguage:[null, [Validators.required]],
       

        });
        window.setTimeout(function () {
            $(".alert").fadeTo(500, 0).slideUp(500, function () {
                $(this).remove();
            });
        }, 4000);

        this.patientImage = "./assets/img/default-avatar.png";

        var self = this;
        this.getPrimaryServiceLocation();
        this.getCCMProvider();
        this.getAddressState();
        this.getPatientTitle();

        this.getPatientLanguage();
        this.getPatientRace();
        this.getPatientEthnicity();

        this.getPatientStatus();
        this.value=false;
    }

    setTimeOut() {
        window.setTimeout(function () {
            $(".alert").fadeTo(2000, 500).slideUp(500, function () {
                $(".alert").slideUp(500);
            });
        }, 4000);
    }

    datepicker(val,label,val1) {
        var self = this;
        $(val1).addClass('customfloat');
        $("#"+val).datepicker({
            Style:"padding-top:10px;",
            changeMonth: true,
            yearRange: "1900:+0",
            defaultDate: '01/01/1953',
            maxDate: new Date(),
            changeYear: true,
            beforeShow: function () {
                setTimeout(function () {
                    $('.ui-datepicker').css('z-index', 99999999999999);
                }, 0);     
            },
            onSelect: function(dateText, inst){ 
                console.log(dateText)
                self.calculateAge(val,dateText,label)
                 }
        }).datepicker("show");
    }

    calculateAge(val,dob,label) {
        if(val=='dob'){
            let age= new Date().getFullYear() - new Date(dob).getFullYear();
            $(label).addClass('customfloat');
            this.AddPatientForm.get(val).setValue((document.getElementById('dob') as HTMLInputElement).value);
            this.AddPatientForm.get("age").setValue(age);
        }
        this.AddPatientForm.get(val).setValue((document.getElementById(val) as HTMLInputElement).value);
    
      }

    getAddressState() {
        this.spinner.show();
        this.masterLookupService.getAddressState()
            .subscribe(
                data => {
                    this.spinner.hide();
                    this.allStates = data;
                },
                errorCode => this.statusCode = errorCode);
    }

    getPatientLanguage() {
        this.spinner.show();
        this.masterLookupService.getLanguage()
            .subscribe(
                data => {
                    this.spinner.hide();
                    this.allLanguages = data;
                },
                errorCode => this.statusCode = errorCode);
    }

    getPatientRace() {
        this.spinner.show();
        this.masterLookupService.getRace()
            .subscribe(
                data => {
                    this.spinner.hide();
                    this.allRace = data;
                },
                errorCode => this.statusCode = errorCode);
    }

    getPatientEthnicity() {
        this.spinner.show();
        this.masterLookupService.getEthnicity()
            .subscribe(
                data => {
                    this.spinner.hide();
                    this.allEthnicity = data;
                },
                errorCode => this.statusCode = errorCode);
    }

    getPatientTitle() {
        this.spinner.show();
        this.masterLookupService.getTitles()
            .subscribe(
                data => {
                    this.spinner.hide();
                    this.allTitles = data;
                },
                errorCode => this.statusCode = errorCode);
    }

    getPatientStatus() {
        this.spinner.show();
        this.masterLookupService.getPatientStatus()
            .subscribe(
                data => {
                    this.spinner.hide();
                    this.alladditionalInfo = data;
                },
                errorCode => this.statusCode = errorCode);
    }

    getPrimaryServiceLocation() {
        this.spinner.show();
        this.clinicLocationService.getAllClinicLocations()
            .subscribe(data => {
                this.spinner.hide();
                this.allCliniclocations = data;
            })
    }

    showModal(){
       
        console.log("ShowModal");
        this.value=!this.value;
      
        $("#expansionPanel2").show();
      
    }

    clearField(val: any) {
        this.patientAddressState_search = '';
        this.additionalInfo_search = '';
        this.patientAddressId_search = '';
        this.staffId_search = '';
        $(val).addClass('customfloat');
    }


    //Fetch CCM Provider from staff_vw
    getCCMProvider() {
        this.spinner.show();
        this.staffDetailsService.getCCMProvider()
            .subscribe(
                data => {
                    this.spinner.hide();
                    this.allProvider = data;
                },
                errorCode => this.statusCode = errorCode);
    }

    onProviderChange(staffId, val) {
        this.staffDetailsService.getStaffDetailsById(staffId)
            .subscribe(data => {
                this.AddPatientForm.get("patientAddressId").setValue(data.locationId);
            })
        $(val).addClass('customfloat');
    }

    onsubmit(event: any) {
        
        if (this.AddPatientForm.valid) {
          
            (<HTMLInputElement>document.getElementById("save")).disabled = true;
            let image = $('#patientImageId').val();
            let patientImage = Base64.encode(image);
            let firstName = this.AddPatientForm.get('firstName').value.trim();
            let middleName = this.AddPatientForm.get('middleName').value;
            let lastName = this.AddPatientForm.get('lastName').value.trim();
            let gender = this.AddPatientForm.get('gender').value;
            let licenseNo = this.AddPatientForm.get('licenseNo').value;
            let title = this.AddPatientForm.get('title').value;
            let dob = moment.utc((document.getElementById("dob") as HTMLInputElement).value).toDate();
            let age = this.AddPatientForm.get('age').value;
            let ssn = this.AddPatientForm.get('ssn').value;
            let buildingNo = this.AddPatientForm.get('buildingNo').value;
            let primaryEmail = this.AddPatientForm.get('primaryEmail').value.trim();
            let secondaryEmail = this.AddPatientForm.get('secondaryEmail').value;
            let primaryNo = this.AddPatientForm.get('primaryNo').value.trim();
            let secondaryNo = this.AddPatientForm.get('secondaryNo').value;
            let patientAddressStreet = this.AddPatientForm.get('patientAddressStreet').value.trim();
            let patientAddressDoorNo = this.AddPatientForm.get('patientAddressDoorNo').value;
            let patientAddressCity = this.AddPatientForm.get('patientAddressCity').value.trim();
            let patientAddressState = this.AddPatientForm.get('patientAddressState').value;
            let patientAddressZip = this.AddPatientForm.get('patientAddressZip').value.trim();
            let staffId = this.AddPatientForm.get('staffId').value;
            let additionalInfo = this.AddPatientForm.get('additionalInfo').value;
            let patientAddressId = this.AddPatientForm.get('patientAddressId').value;
            let PInsRelationship = this.AddPatientForm.get('PInsRelationship').value;
            let SInsRelationship = this.AddPatientForm.get('SInsRelationship').value;
            let PInsName = this.AddPatientForm.get('PInsName').value.trim();
            let SInsName = this.AddPatientForm.get('SInsName').value;
            let PInsCompany = this.AddPatientForm.get('PInsCompany').value;
            let SInsCompany = this.AddPatientForm.get('SInsCompany').value;
            let PInsPlanName = this.AddPatientForm.get('PInsPlanName').value;
            let SInsPlanName = this.AddPatientForm.get('SInsPlanName').value;
            let PInsId = this.AddPatientForm.get('PInsId').value;
            let SInsId = this.AddPatientForm.get('SInsId').value;
            let PInsGroup = this.AddPatientForm.get('PInsGroup').value;
            let SInsGroup = this.AddPatientForm.get('SInsGroup').value;
            let PInsDob = moment.utc((document.getElementById("PInsDob") as HTMLInputElement).value).toDate();
            let SInsDob = moment.utc((document.getElementById("SInsDob") as HTMLInputElement).value).toDate();
            let PInsSsn = this.AddPatientForm.get('PInsSsn').value.trim();
            let SInsSsn = this.AddPatientForm.get('SInsSsn').value;
            let PInsEmployer = this.AddPatientForm.get('PInsEmployer').value;
            let SInsEmployer = this.AddPatientForm.get('SInsEmployer').value;
            let race = this.AddPatientForm.get('race').value;
            let ethnicity = this.AddPatientForm.get('ethnicity').value;
            let patientLanguage = this.AddPatientForm.get('patientLanguage').value;

                let patientDetails = new PatientDetails(0, patientImage, firstName, middleName, lastName,null, gender,title, dob ,true,primaryEmail, secondaryEmail,primaryNo, secondaryNo,patientAddressStreet, patientAddressDoorNo, patientAddressCity, patientAddressState,
                patientAddressZip, staffId, 0, patientAddressId, null, additionalInfo,null, null, null, null,PInsName,PInsRelationship,SInsRelationship,SInsName,PInsCompany,SInsCompany,PInsPlanName,SInsPlanName,PInsId,SInsId,PInsGroup,SInsGroup,PInsDob ,SInsDob,PInsSsn,SInsSsn,
                PInsEmployer,SInsEmployer,licenseNo,ssn,age,buildingNo,race,ethnicity,patientLanguage);   
                console.log(patientDetails)
               this.patientDetailsService.inserPatientDetails(patientDetails)
                .subscribe(data => {
                    let fullName = data.firstName + " " + data.lastName;
                    this.sharedData.successMsg = fullName;
                    this.sharedData.statusCode = 201;
                    this.sharedData.msgName = "Patient";
                    this.router.navigate(['patients/patientlist']);
                },
                    ErrorCode => {
                        (<HTMLInputElement>document.getElementById("save")).disabled = false;
                        this.statusCode = ErrorCode;
                        this.setTimeOut();
                    })
        }
        else {
            console.log("else")
            this.validateAllFormFields(this.AddPatientForm);
        }
    }

    validateAllFormFields(formGroup: FormGroup) {
        Object.keys(formGroup.controls).forEach(field => {
            const control = formGroup.get(field);
            if (control instanceof FormControl) {
                control.markAsTouched({ onlySelf: true });
            } else if (control instanceof FormGroup) {
                this.validateAllFormFields(control);
            }
        });
    }

    selectFile(event) {
        if (event.target.files[0].size < 30000) {
            this.isNotValidImageSize = false;
            let currentFileUpload = event.target.files[0];
            if (event.target.files && currentFileUpload) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    $('#wizardPicturePreview').attr('src', (<FileReader>e.target).result).fadeIn('slow');
                    $('#patientImageId').attr('value', reader.result);
                };
                reader.readAsDataURL(currentFileUpload);
            }
        }
        else {
            this.isNotValidImageSize = true;
            this.patientImage = "../../assets/img/default-avatar.png";
        }
    }

}

@Pipe({ name: 'lookupPipe' })
export class lookupPipe implements PipeTransform {
    transform(array: any[], query: string): any {
        if (query) {
            query = query.toLowerCase();
            return array.filter((value: any) => value.lookupCode &&
                value.lookupCode.toLowerCase().indexOf(query) > -1);
        }
        return array;
    }
}

@Pipe({ name: 'primaryProvider' })
export class PrimaryProviderPipe implements PipeTransform {
    transform(array: any[], query: string): any {
        if (query) {
            query = query.toLowerCase();
            return array.filter((value: any) => value.staffFullName &&
                value.staffFullName.toLowerCase().indexOf(query) > -1);
        }
        return array;
    }
}
@Pipe({ name: 'primaryServiceLocation' })
export class PrimaryServiceLocationPipe implements PipeTransform {
    transform(array: any[], query: string): any {
        if (query) {
            query = query.toLowerCase();
            return array.filter((value: any) => value.locationName &&
                value.locationName.toLowerCase().indexOf(query) > -1);
        }
        return array;
    }
}
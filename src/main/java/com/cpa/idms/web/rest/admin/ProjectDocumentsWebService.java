/*
 * Created on 2021-05-06 ( Date ISO 2021-05-06 - Time 17:00:24 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.cpa.idms.web.rest.admin;


import javax.validation.Valid;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PagedResourcesAssembler;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.CrossOrigin;
import java.util.List;
import org.springframework.web.bind.annotation.RequestParam;
import com.cpa.idms.backend.dao.admin.entities.StaffMember;
import com.cpa.idms.backend.dao.exception.entities.IdmsBaseException;
import com.cpa.idms.service.admin.IDMSBaseService;
import com.cpa.idms.service.admin.ProjectDocumentsService;
import com.cpa.idms.service.admin.dto.ProjectDocumentsDTO;
import com.cpa.idms.util.FormatConverterUtils;



/**
 * Rest controller which produce Hal+json content (including hateoas metadata).
 * @author Rajol version 3.0.0
 */
@RestController
@RequestMapping("/api/rest")
@CrossOrigin(origins = { "http://localhost:4300" })
public class ProjectDocumentsWebService {

	private static final Logger LOG = LoggerFactory.getLogger(ProjectDocumentsWebService.class);


	@Autowired
	private  ProjectDocumentsService projectDocumentsService;

	@Autowired
	private IDMSBaseService idmsBaseService;

	
	@PostMapping("/createProjectDocuments")
	public ResponseEntity<ProjectDocumentsDTO> insertProjectDocuments(@RequestBody ProjectDocumentsDTO projectDocumentsDTO){
		try{
				if(projectDocumentsDTO!=null) {				
					StaffMember loginUser = idmsBaseService.currentUser();
					FormatConverterUtils.setInitialDefaultValues(projectDocumentsDTO, loginUser);
				
					ProjectDocumentsDTO dataprojectDocumentsDTO = projectDocumentsService.insertProjectDocuments(projectDocumentsDTO);
					return new ResponseEntity<> (dataprojectDocumentsDTO, HttpStatus.OK);
			}
		}catch (Exception e) {
			LOG.error("Error while inserting ProjectDocuments {}",e);
		}
		
		HttpHeaders headers= new HttpHeaders();
		return new ResponseEntity<>(headers, HttpStatus.NOT_IMPLEMENTED);
	}

	@GetMapping("/getAllProjectDocuments")
	public ResponseEntity<List<ProjectDocumentsDTO>> getAllProjectDocuments() {
		List<ProjectDocumentsDTO> projectDocumentsDTOResp;
		try {
			projectDocumentsDTOResp = projectDocumentsService.retrieveAllProjectDocuments();
			return new ResponseEntity<> (projectDocumentsDTOResp, HttpStatus.OK);

		} catch (IdmsBaseException e) {
			LOG.error("Error while retrieving all  ProjectDocuments {}",e);
		}
		HttpHeaders headers= new HttpHeaders();
		return new ResponseEntity<>(headers, HttpStatus.NOT_IMPLEMENTED);
	}

		@GetMapping("/getProjectDocumentsById")
	public ResponseEntity<ProjectDocumentsDTO> getProjectDocumentsById(@RequestParam("id") Long projectDocumentsId) {
	ProjectDocumentsDTO projectDocumentsDTO;
		try {
			projectDocumentsDTO =  projectDocumentsService.retrieveProjectDocumentsById( projectDocumentsId);
			return new ResponseEntity<> (projectDocumentsDTO, HttpStatus.OK);
		} catch (IdmsBaseException e) {
			LOG.error("Error while retrieving By ProjectDocuments ID {}",e);
		}
		HttpHeaders headers= new HttpHeaders();
		return new ResponseEntity<>(headers , HttpStatus.NOT_IMPLEMENTED);
	}


	
	@PutMapping("/updateProjectDocuments")
	public ResponseEntity<ProjectDocumentsDTO> updateProjectDocuments(@RequestBody ProjectDocumentsDTO projectDocumentsDTO){
		try{
			  if(projectDocumentsDTO!=null) {				
				StaffMember loginUser = idmsBaseService.currentUser();
				FormatConverterUtils.setInitialDefaultValues(projectDocumentsDTO, loginUser);
				ProjectDocumentsDTO dataprojectDocumentsDTO = projectDocumentsService.updateProjectDocuments(projectDocumentsDTO);
				return new ResponseEntity<> (dataprojectDocumentsDTO, HttpStatus.OK);
			}
		}catch (Exception e) {
			LOG.error("Error while updating ProjectDocuments {}",e);
		}
		
		HttpHeaders headers= new HttpHeaders();
		return new ResponseEntity<>(headers, HttpStatus.NOT_IMPLEMENTED);
	}


	@DeleteMapping("/removeProjectDocumentsById")
	public ResponseEntity<Void> deleteProjectDocumentsById(@Valid @RequestParam("id") Long projectDocumentsId){
	HttpHeaders headers= new HttpHeaders();
		try {
			Boolean flag = projectDocumentsService.deleteById(projectDocumentsId);
			if(flag)
				return new ResponseEntity<> (headers, HttpStatus.OK);
			else
				return new ResponseEntity<>(headers, HttpStatus.NOT_IMPLEMENTED);
		}catch (Exception e) {
			LOG.error("Error while deleting By ProjectDocuments ID {}",e);
		}
		
		return new ResponseEntity<>(headers, HttpStatus.NOT_IMPLEMENTED);
	
	}

}











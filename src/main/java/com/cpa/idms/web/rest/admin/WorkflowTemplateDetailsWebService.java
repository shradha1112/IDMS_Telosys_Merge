/*
 * Created on 2021-05-06 ( Date ISO 2021-05-06 - Time 17:00:26 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.cpa.idms.web.rest.admin;


import javax.validation.Valid;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.CrossOrigin;
import java.util.List;
import org.springframework.web.bind.annotation.RequestParam;
import com.cpa.idms.backend.dao.admin.entities.StaffMember;
import com.cpa.idms.backend.dao.exception.entities.IdmsBaseException;
import com.cpa.idms.service.admin.IDMSBaseService;
import com.cpa.idms.service.admin.WorkflowTemplateDetailsService;
import com.cpa.idms.service.admin.dto.WorkflowTemplateDetailsDTO;
import com.cpa.idms.util.FormatConverterUtils;



/**
 * Rest controller which produce Hal+json content (including hateoas metadata).
 * @author Rajol version 3.0.0
 */
@RestController
@RequestMapping("/api/rest")
@CrossOrigin(origins = { "http://localhost:4300" })
public class WorkflowTemplateDetailsWebService {

	private static final Logger LOG = LoggerFactory.getLogger(WorkflowTemplateDetailsWebService.class);


	@Autowired
	private  WorkflowTemplateDetailsService workflowTemplateDetailsService;

	@Autowired
	private IDMSBaseService idmsBaseService;

	
	@PostMapping("/createWorkflowTemplateDetails")
	public ResponseEntity<WorkflowTemplateDetailsDTO> insertWorkflowTemplateDetails(@RequestBody WorkflowTemplateDetailsDTO workflowTemplateDetailsDTO){
		try{
				if(workflowTemplateDetailsDTO!=null) {				
					StaffMember loginUser = idmsBaseService.currentUser();
					FormatConverterUtils.setInitialDefaultValues(workflowTemplateDetailsDTO, loginUser);
				
					WorkflowTemplateDetailsDTO dataworkflowTemplateDetailsDTO = workflowTemplateDetailsService.insertWorkflowTemplateDetails(workflowTemplateDetailsDTO);
					return new ResponseEntity<> (dataworkflowTemplateDetailsDTO, HttpStatus.OK);
			}
		}catch (Exception e) {
			LOG.error("Error while inserting WorkflowTemplateDetails {}",e);
		}
		
		HttpHeaders headers= new HttpHeaders();
		return new ResponseEntity<>(headers, HttpStatus.NOT_IMPLEMENTED);
	}

	@GetMapping("/getAllWorkflowTemplateDetails")
	public ResponseEntity<List<WorkflowTemplateDetailsDTO>> getAllWorkflowTemplateDetails() {
		List<WorkflowTemplateDetailsDTO> workflowTemplateDetailsDTOResp;
		try {
			workflowTemplateDetailsDTOResp = workflowTemplateDetailsService.retrieveAllWorkflowTemplateDetails();
			return new ResponseEntity<> (workflowTemplateDetailsDTOResp, HttpStatus.OK);

		} catch (IdmsBaseException e) {
			LOG.error("Error while retrieving all  WorkflowTemplateDetails {}",e);
		}
		HttpHeaders headers= new HttpHeaders();
		return new ResponseEntity<>(headers, HttpStatus.NOT_IMPLEMENTED);
	}

		@GetMapping("/getWorkflowTemplateDetailsById")
	public ResponseEntity<WorkflowTemplateDetailsDTO> getWorkflowTemplateDetailsById(@RequestParam("id") Long workflowTemplateDetailsId) {
	WorkflowTemplateDetailsDTO workflowTemplateDetailsDTO;
		try {
			workflowTemplateDetailsDTO =  workflowTemplateDetailsService.retrieveWorkflowTemplateDetailsById( workflowTemplateDetailsId);
			return new ResponseEntity<> (workflowTemplateDetailsDTO, HttpStatus.OK);
		} catch (IdmsBaseException e) {
			LOG.error("Error while retrieving By WorkflowTemplateDetails ID {}",e);
		}
		HttpHeaders headers= new HttpHeaders();
		return new ResponseEntity<>(headers , HttpStatus.NOT_IMPLEMENTED);
	}


	
	@PutMapping("/updateWorkflowTemplateDetails")
	public ResponseEntity<WorkflowTemplateDetailsDTO> updateWorkflowTemplateDetails(@RequestBody WorkflowTemplateDetailsDTO workflowTemplateDetailsDTO){
		try{
			  if(workflowTemplateDetailsDTO!=null) {				
				StaffMember loginUser = idmsBaseService.currentUser();
				FormatConverterUtils.setInitialDefaultValues(workflowTemplateDetailsDTO, loginUser);
				WorkflowTemplateDetailsDTO dataworkflowTemplateDetailsDTO = workflowTemplateDetailsService.updateWorkflowTemplateDetails(workflowTemplateDetailsDTO);
				return new ResponseEntity<> (dataworkflowTemplateDetailsDTO, HttpStatus.OK);
			}
		}catch (Exception e) {
			LOG.error("Error while updating WorkflowTemplateDetails {}",e);
		}
		
		HttpHeaders headers= new HttpHeaders();
		return new ResponseEntity<>(headers, HttpStatus.NOT_IMPLEMENTED);
	}


	@DeleteMapping("/removeWorkflowTemplateDetailsById")
	public ResponseEntity<Void> deleteWorkflowTemplateDetailsById(@Valid @RequestParam("id") Long workflowTemplateDetailsId){
	HttpHeaders headers= new HttpHeaders();
		try {
			Boolean flag = workflowTemplateDetailsService.deleteById(workflowTemplateDetailsId);
			if(flag)
				return new ResponseEntity<> (headers, HttpStatus.OK);
			else
				return new ResponseEntity<>(headers, HttpStatus.NOT_IMPLEMENTED);
		}catch (Exception e) {
			LOG.error("Error while deleting By WorkflowTemplateDetails ID {}",e);
		}
		
		return new ResponseEntity<>(headers, HttpStatus.NOT_IMPLEMENTED);
	
	}

}











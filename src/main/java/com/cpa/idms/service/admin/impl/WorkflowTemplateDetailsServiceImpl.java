/*
 * Created on 2021-05-06 ( Date ISO 2021-05-06 - Time 17:00:25 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.cpa.idms.service.admin.impl;

import java.util.Collections;
import java.util.List;
import com.cpa.idms.backend.dao.admin.entities.WorkflowTemplateDetails;
import com.cpa.idms.service.admin.WorkflowTemplateDetailsService;
import com.cpa.idms.service.admin.dto.WorkflowTemplateDetailsDTO;
import com.cpa.idms.service.admin.dto.mapper.WorkflowTemplateDetailsMapper;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import com.cpa.idms.backend.dao.admin.WorkflowTemplateDetailsRepository;
import com.cpa.idms.backend.dao.admin.entities.StaffMember;
import com.cpa.idms.backend.dao.exception.entities.IdmsBaseException;
import com.cpa.idms.service.admin.IDMSBaseService;
import com.cpa.idms.util.FormatConverterUtils;
import org.springframework.stereotype.Service;
/**
 * Service implementation for WorkflowTemplateDetails.
 * @author Rajol version 3.0.0
 */
@Service
public class WorkflowTemplateDetailsServiceImpl implements WorkflowTemplateDetailsService {

private static final Logger LOG = Logger.getLogger(WorkflowTemplateDetailsServiceImpl.class);

	@Autowired
	private WorkflowTemplateDetailsRepository workflowTemplateDetailsRepository;

	@Autowired
	private WorkflowTemplateDetailsMapper workflowTemplateDetailsMapper;

	@Autowired
	private IDMSBaseService idmsBaseService;

	
		
	@Override
	public WorkflowTemplateDetailsDTO insertWorkflowTemplateDetails(WorkflowTemplateDetailsDTO workflowTemplateDetailsDTOinsert) throws IdmsBaseException{
	try {
			if (workflowTemplateDetailsDTOinsert != null) {
				WorkflowTemplateDetails workflowTemplateDetails = workflowTemplateDetailsMapper.convertWorkflowTemplateDetailsDTOToEntity(workflowTemplateDetailsDTOinsert);
				WorkflowTemplateDetails insertedworkflowTemplateDetails = workflowTemplateDetailsRepository.save(workflowTemplateDetails);

				return (insertedworkflowTemplateDetails != null) ? workflowTemplateDetailsMapper.convertEntityToWorkflowTemplateDetailsDTO(insertedworkflowTemplateDetails) : null;
			}
		} catch (Exception e) {
			LOG.error("Error while inserting WorkflowTemplateDetails {} ", e);
		}
		return null;
	}

	@Override
		public WorkflowTemplateDetailsDTO retrieveWorkflowTemplateDetailsById(Long workflowTemplateDetailsId) throws IdmsBaseException{
	try {
			if(workflowTemplateDetailsId != null) {
				WorkflowTemplateDetails workflowTemplateDetails = workflowTemplateDetailsRepository.findOne(workflowTemplateDetailsId);
				return (workflowTemplateDetails != null) ? workflowTemplateDetailsMapper.convertEntityToWorkflowTemplateDetailsDTO(workflowTemplateDetails) : null;
			}
		}catch (Exception e) {
				LOG.error("Error Message",e);
		}
		return null;
	}

	@Override
	public List<WorkflowTemplateDetailsDTO> retrieveAllWorkflowTemplateDetails() throws IdmsBaseException {
	try {
			List<WorkflowTemplateDetails> workflowTemplateDetailsList = workflowTemplateDetailsRepository.findAll();
			return (workflowTemplateDetailsList != null) ? workflowTemplateDetailsMapper.entityListToWorkflowTemplateDetailsDTOList(workflowTemplateDetailsList) : null;
		} catch (Exception e) {
		LOG.error("Error message",e);		
		}
		return Collections.emptyList();
	}

	@Override
	public 	WorkflowTemplateDetailsDTO updateWorkflowTemplateDetails(WorkflowTemplateDetailsDTO workflowTemplateDetailsDTOUpdate) throws IdmsBaseException{
	try{
		if(workflowTemplateDetailsDTOUpdate !=null){
						WorkflowTemplateDetails workflowTemplateDetails = workflowTemplateDetailsMapper.convertWorkflowTemplateDetailsDTOToEntity(workflowTemplateDetailsDTOUpdate);
				WorkflowTemplateDetails UpdatedworkflowTemplateDetails = workflowTemplateDetailsRepository.saveAndFlush(workflowTemplateDetails);
				return (UpdatedworkflowTemplateDetails != null) ? workflowTemplateDetailsMapper.convertEntityToWorkflowTemplateDetailsDTO(UpdatedworkflowTemplateDetails) : null;
					
		}
	}
	catch (Exception e){
			LOG.error("Error while updating WorkflowTemplateDetails {} ", e);
		}
	return null;
	}


	@Override
		public Boolean deleteById(Long workflowTemplateDetailsId) throws IdmsBaseException{
	try {
			WorkflowTemplateDetails workflowTemplateDetails = workflowTemplateDetailsRepository.findOne(workflowTemplateDetailsId);
			if (workflowTemplateDetails != null) {
				StaffMember loginUser = idmsBaseService.currentUser();
				FormatConverterUtils.setInitialDeleteValues(workflowTemplateDetails, loginUser);
				workflowTemplateDetailsRepository.saveAndFlush(workflowTemplateDetails);
				return true;
			}
		} catch (Exception e) {
			LOG.error("Error while deleting WorkflowTemplateDetails {} ", e);
		}
		return false;


	}



}












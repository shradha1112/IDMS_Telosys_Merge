/*
 * Created on 2021-05-06 ( Date ISO 2021-05-06 - Time 17:00:23 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.cpa.idms.service.admin.impl;

import java.util.Collections;
import java.util.List;

import com.cpa.idms.backend.dao.admin.DocumentsVersionWorkflowCommentsRepository;
import com.cpa.idms.backend.dao.admin.entities.DocumentsVersionWorkflowComments;
import com.cpa.idms.service.admin.DocumentsVersionWorkflowCommentsService;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import com.cpa.idms.backend.dao.admin.entities.StaffMember;
import com.cpa.idms.backend.dao.exception.entities.IdmsBaseException;
import com.cpa.idms.service.admin.IDMSBaseService;
import com.cpa.idms.service.admin.dto.DocumentsVersionWorkflowCommentsDTO;
import com.cpa.idms.service.admin.dto.mapper.DocumentsVersionWorkflowCommentsMapper;
import com.cpa.idms.util.FormatConverterUtils;
import org.springframework.stereotype.Service;
/**
 * Service implementation for DocumentsVersionWorkflowComments.
 * @author Rajol version 3.0.0
 */
@Service
public class DocumentsVersionWorkflowCommentsServiceImpl implements DocumentsVersionWorkflowCommentsService {

private static final Logger LOG = Logger.getLogger(DocumentsVersionWorkflowCommentsServiceImpl.class);

	@Autowired
	private DocumentsVersionWorkflowCommentsRepository documentsVersionWorkflowCommentsRepository;

	@Autowired
	private DocumentsVersionWorkflowCommentsMapper documentsVersionWorkflowCommentsMapper;

	@Autowired
	private IDMSBaseService idmsBaseService;

	
		
	@Override
	public DocumentsVersionWorkflowCommentsDTO insertDocumentsVersionWorkflowComments(DocumentsVersionWorkflowCommentsDTO documentsVersionWorkflowCommentsDTOinsert) throws IdmsBaseException{
	try {
			if (documentsVersionWorkflowCommentsDTOinsert != null) {
				DocumentsVersionWorkflowComments documentsVersionWorkflowComments = documentsVersionWorkflowCommentsMapper.convertDocumentsVersionWorkflowCommentsDTOToEntity(documentsVersionWorkflowCommentsDTOinsert);
				DocumentsVersionWorkflowComments inserteddocumentsVersionWorkflowComments = documentsVersionWorkflowCommentsRepository.save(documentsVersionWorkflowComments);

				return (inserteddocumentsVersionWorkflowComments != null) ? documentsVersionWorkflowCommentsMapper.convertEntityToDocumentsVersionWorkflowCommentsDTO(inserteddocumentsVersionWorkflowComments) : null;
			}
		} catch (Exception e) {
			LOG.error("Error while inserting DocumentsVersionWorkflowComments {} ", e);
		}
		return null;
	}

	@Override
		public DocumentsVersionWorkflowCommentsDTO retrieveDocumentsVersionWorkflowCommentsById(Long documentsVersionWorkflowCommentsId) throws IdmsBaseException{
	try {
			if(documentsVersionWorkflowCommentsId != null) {
				DocumentsVersionWorkflowComments documentsVersionWorkflowComments = documentsVersionWorkflowCommentsRepository.findOne(documentsVersionWorkflowCommentsId);
				return (documentsVersionWorkflowComments != null) ? documentsVersionWorkflowCommentsMapper.convertEntityToDocumentsVersionWorkflowCommentsDTO(documentsVersionWorkflowComments) : null;
			}
		}catch (Exception e) {
				LOG.error("Error Message",e);
		}
		return null;
	}

	@Override
	public List<DocumentsVersionWorkflowCommentsDTO> retrieveAllDocumentsVersionWorkflowComments() throws IdmsBaseException {
	try {
			List<DocumentsVersionWorkflowComments> documentsVersionWorkflowCommentsList = documentsVersionWorkflowCommentsRepository.findAll();
			return (documentsVersionWorkflowCommentsList != null) ? documentsVersionWorkflowCommentsMapper.entityListToDocumentsVersionWorkflowCommentsDTOList(documentsVersionWorkflowCommentsList) : null;
		} catch (Exception e) {
		LOG.error("Error message",e);		
		}
		return Collections.emptyList();
	}

	@Override
	public 	DocumentsVersionWorkflowCommentsDTO updateDocumentsVersionWorkflowComments(DocumentsVersionWorkflowCommentsDTO documentsVersionWorkflowCommentsDTOUpdate) throws IdmsBaseException{
	try{
		if(documentsVersionWorkflowCommentsDTOUpdate !=null){
						DocumentsVersionWorkflowComments documentsVersionWorkflowComments = documentsVersionWorkflowCommentsMapper.convertDocumentsVersionWorkflowCommentsDTOToEntity(documentsVersionWorkflowCommentsDTOUpdate);
				DocumentsVersionWorkflowComments UpdateddocumentsVersionWorkflowComments = documentsVersionWorkflowCommentsRepository.saveAndFlush(documentsVersionWorkflowComments);
				return (UpdateddocumentsVersionWorkflowComments != null) ? documentsVersionWorkflowCommentsMapper.convertEntityToDocumentsVersionWorkflowCommentsDTO(UpdateddocumentsVersionWorkflowComments) : null;
					
		}
	}
	catch (Exception e){
			LOG.error("Error while updating DocumentsVersionWorkflowComments {} ", e);
		}
	return null;
	}


	@Override
		public Boolean deleteById(Long documentsVersionWorkflowCommentsId) throws IdmsBaseException{
	try {
			DocumentsVersionWorkflowComments documentsVersionWorkflowComments = documentsVersionWorkflowCommentsRepository.findOne(documentsVersionWorkflowCommentsId);
			if (documentsVersionWorkflowComments != null) {
				StaffMember loginUser = idmsBaseService.currentUser();
				FormatConverterUtils.setInitialDeleteValues(documentsVersionWorkflowComments, loginUser);
				documentsVersionWorkflowCommentsRepository.saveAndFlush(documentsVersionWorkflowComments);
				return true;
			}
		} catch (Exception e) {
			LOG.error("Error while deleting DocumentsVersionWorkflowComments {} ", e);
		}
		return false;


	}



}












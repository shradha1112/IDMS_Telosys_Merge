/*
 * Created on 2021-05-06 ( Date ISO 2021-05-06 - Time 17:00:24 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.cpa.idms.service.admin.impl;

import java.util.Collections;
import java.util.List;

import com.cpa.idms.backend.dao.admin.ProjectDocumentsRepository;
import com.cpa.idms.backend.dao.admin.entities.ProjectDocuments;
import com.cpa.idms.service.admin.ProjectDocumentsService;
import com.cpa.idms.service.admin.dto.ProjectDocumentsDTO;
import com.cpa.idms.service.admin.dto.mapper.ProjectDocumentsMapper;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import com.cpa.idms.backend.dao.admin.entities.StaffMember;
import com.cpa.idms.backend.dao.exception.entities.IdmsBaseException;
import com.cpa.idms.service.admin.IDMSBaseService;
import com.cpa.idms.util.FormatConverterUtils;
import org.springframework.stereotype.Service;
/**
 * Service implementation for ProjectDocuments.
 * @author Rajol version 3.0.0
 */
@Service
public class ProjectDocumentsServiceImpl implements ProjectDocumentsService {

private static final Logger LOG = Logger.getLogger(ProjectDocumentsServiceImpl.class);

	@Autowired
	private ProjectDocumentsRepository projectDocumentsRepository;

	@Autowired
	private ProjectDocumentsMapper projectDocumentsMapper;

	@Autowired
	private IDMSBaseService idmsBaseService;

	
		
	@Override
	public ProjectDocumentsDTO insertProjectDocuments(ProjectDocumentsDTO projectDocumentsDTOinsert) throws IdmsBaseException{
	try {
			if (projectDocumentsDTOinsert != null) {
				ProjectDocuments projectDocuments = projectDocumentsMapper.convertProjectDocumentsDTOToEntity(projectDocumentsDTOinsert);
				ProjectDocuments insertedprojectDocuments = projectDocumentsRepository.save(projectDocuments);

				return (insertedprojectDocuments != null) ? projectDocumentsMapper.convertEntityToProjectDocumentsDTO(insertedprojectDocuments) : null;
			}
		} catch (Exception e) {
			LOG.error("Error while inserting ProjectDocuments {} ", e);
		}
		return null;
	}

	@Override
		public ProjectDocumentsDTO retrieveProjectDocumentsById(Long projectDocumentsId) throws IdmsBaseException{
	try {
			if(projectDocumentsId != null) {
				ProjectDocuments projectDocuments = projectDocumentsRepository.findOne(projectDocumentsId);
				return (projectDocuments != null) ? projectDocumentsMapper.convertEntityToProjectDocumentsDTO(projectDocuments) : null;
			}
		}catch (Exception e) {
				LOG.error("Error Message",e);
		}
		return null;
	}

	@Override
	public List<ProjectDocumentsDTO> retrieveAllProjectDocuments() throws IdmsBaseException {
	try {
			List<ProjectDocuments> projectDocumentsList = projectDocumentsRepository.findAll();
			return (projectDocumentsList != null) ? projectDocumentsMapper.entityListToProjectDocumentsDTOList(projectDocumentsList) : null;
		} catch (Exception e) {
		LOG.error("Error message",e);		
		}
		return Collections.emptyList();
	}

	@Override
	public 	ProjectDocumentsDTO updateProjectDocuments(ProjectDocumentsDTO projectDocumentsDTOUpdate) throws IdmsBaseException{
	try{
		if(projectDocumentsDTOUpdate !=null){
						ProjectDocuments projectDocuments = projectDocumentsMapper.convertProjectDocumentsDTOToEntity(projectDocumentsDTOUpdate);
				ProjectDocuments UpdatedprojectDocuments = projectDocumentsRepository.saveAndFlush(projectDocuments);
				return (UpdatedprojectDocuments != null) ? projectDocumentsMapper.convertEntityToProjectDocumentsDTO(UpdatedprojectDocuments) : null;
					
		}
	}
	catch (Exception e){
			LOG.error("Error while updating ProjectDocuments {} ", e);
		}
	return null;
	}


	@Override
		public Boolean deleteById(Long projectDocumentsId) throws IdmsBaseException{
	try {
			ProjectDocuments projectDocuments = projectDocumentsRepository.findOne(projectDocumentsId);
			if (projectDocuments != null) {
				StaffMember loginUser = idmsBaseService.currentUser();
				FormatConverterUtils.setInitialDeleteValues(projectDocuments, loginUser);
				projectDocumentsRepository.saveAndFlush(projectDocuments);
				return true;
			}
		} catch (Exception e) {
			LOG.error("Error while deleting ProjectDocuments {} ", e);
		}
		return false;


	}



}












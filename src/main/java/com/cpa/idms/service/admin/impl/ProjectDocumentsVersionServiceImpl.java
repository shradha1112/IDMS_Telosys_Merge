/*
 * Created on 2021-05-06 ( Date ISO 2021-05-06 - Time 17:00:24 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.cpa.idms.service.admin.impl;

import java.util.Collections;
import java.util.List;

import com.cpa.idms.backend.dao.admin.ProjectDocumentsVersionRepository;
import com.cpa.idms.backend.dao.admin.entities.ProjectDocumentsVersion;
import com.cpa.idms.service.admin.ProjectDocumentsVersionService;
import com.cpa.idms.service.admin.dto.ProjectDocumentsVersionDTO;
import com.cpa.idms.service.admin.dto.mapper.ProjectDocumentsVersionMapper;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import com.cpa.idms.backend.dao.admin.entities.StaffMember;
import com.cpa.idms.backend.dao.exception.entities.IdmsBaseException;
import com.cpa.idms.service.admin.IDMSBaseService;
import com.cpa.idms.util.FormatConverterUtils;
import org.springframework.stereotype.Service;
/**
 * Service implementation for ProjectDocumentsVersion.
 * @author Rajol version 3.0.0
 */
@Service
public class ProjectDocumentsVersionServiceImpl implements ProjectDocumentsVersionService {

private static final Logger LOG = Logger.getLogger(ProjectDocumentsVersionServiceImpl.class);

	@Autowired
	private ProjectDocumentsVersionRepository projectDocumentsVersionRepository;

	@Autowired
	private ProjectDocumentsVersionMapper projectDocumentsVersionMapper;

	@Autowired
	private IDMSBaseService idmsBaseService;

	
		
	@Override
	public ProjectDocumentsVersionDTO insertProjectDocumentsVersion(ProjectDocumentsVersionDTO projectDocumentsVersionDTOinsert) throws IdmsBaseException{
	try {
			if (projectDocumentsVersionDTOinsert != null) {
				ProjectDocumentsVersion projectDocumentsVersion = projectDocumentsVersionMapper.convertProjectDocumentsVersionDTOToEntity(projectDocumentsVersionDTOinsert);
				ProjectDocumentsVersion insertedprojectDocumentsVersion = projectDocumentsVersionRepository.save(projectDocumentsVersion);

				return (insertedprojectDocumentsVersion != null) ? projectDocumentsVersionMapper.convertEntityToProjectDocumentsVersionDTO(insertedprojectDocumentsVersion) : null;
			}
		} catch (Exception e) {
			LOG.error("Error while inserting ProjectDocumentsVersion {} ", e);
		}
		return null;
	}

	@Override
		public ProjectDocumentsVersionDTO retrieveProjectDocumentsVersionById(Long projectDocumentsVersionId) throws IdmsBaseException{
	try {
			if(projectDocumentsVersionId != null) {
				ProjectDocumentsVersion projectDocumentsVersion = projectDocumentsVersionRepository.findOne(projectDocumentsVersionId);
				return (projectDocumentsVersion != null) ? projectDocumentsVersionMapper.convertEntityToProjectDocumentsVersionDTO(projectDocumentsVersion) : null;
			}
		}catch (Exception e) {
				LOG.error("Error Message",e);
		}
		return null;
	}

	@Override
	public List<ProjectDocumentsVersionDTO> retrieveAllProjectDocumentsVersion() throws IdmsBaseException {
	try {
			List<ProjectDocumentsVersion> projectDocumentsVersionList = projectDocumentsVersionRepository.findAll();
			return (projectDocumentsVersionList != null) ? projectDocumentsVersionMapper.entityListToProjectDocumentsVersionDTOList(projectDocumentsVersionList) : null;
		} catch (Exception e) {
		LOG.error("Error message",e);		
		}
		return Collections.emptyList();
	}

	@Override
	public 	ProjectDocumentsVersionDTO updateProjectDocumentsVersion(ProjectDocumentsVersionDTO projectDocumentsVersionDTOUpdate) throws IdmsBaseException{
	try{
		if(projectDocumentsVersionDTOUpdate !=null){
						ProjectDocumentsVersion projectDocumentsVersion = projectDocumentsVersionMapper.convertProjectDocumentsVersionDTOToEntity(projectDocumentsVersionDTOUpdate);
				ProjectDocumentsVersion UpdatedprojectDocumentsVersion = projectDocumentsVersionRepository.saveAndFlush(projectDocumentsVersion);
				return (UpdatedprojectDocumentsVersion != null) ? projectDocumentsVersionMapper.convertEntityToProjectDocumentsVersionDTO(UpdatedprojectDocumentsVersion) : null;
					
		}
	}
	catch (Exception e){
			LOG.error("Error while updating ProjectDocumentsVersion {} ", e);
		}
	return null;
	}


	@Override
		public Boolean deleteById(Long projectDocumentsVersionId) throws IdmsBaseException{
	try {
			ProjectDocumentsVersion projectDocumentsVersion = projectDocumentsVersionRepository.findOne(projectDocumentsVersionId);
			if (projectDocumentsVersion != null) {
				StaffMember loginUser = idmsBaseService.currentUser();
				FormatConverterUtils.setInitialDeleteValues(projectDocumentsVersion, loginUser);
				projectDocumentsVersionRepository.saveAndFlush(projectDocumentsVersion);
				return true;
			}
		} catch (Exception e) {
			LOG.error("Error while deleting ProjectDocumentsVersion {} ", e);
		}
		return false;


	}



}












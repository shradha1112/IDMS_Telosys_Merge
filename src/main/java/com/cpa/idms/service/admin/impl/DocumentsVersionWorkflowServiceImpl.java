/*
 * Created on 2021-05-06 ( Date ISO 2021-05-06 - Time 17:00:22 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.cpa.idms.service.admin.impl;

import java.util.Collections;
import java.util.List;

import com.cpa.idms.backend.dao.admin.DocumentsVersionWorkflowRepository;
import com.cpa.idms.backend.dao.admin.entities.DocumentsVersionWorkflow;
import com.cpa.idms.service.admin.DocumentsVersionWorkflowService;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import com.cpa.idms.backend.dao.admin.entities.StaffMember;
import com.cpa.idms.backend.dao.exception.entities.IdmsBaseException;
import com.cpa.idms.service.admin.IDMSBaseService;
import com.cpa.idms.service.admin.dto.DocumentsVersionWorkflowDTO;
import com.cpa.idms.service.admin.dto.mapper.DocumentsVersionWorkflowMapper;
import com.cpa.idms.util.FormatConverterUtils;
import org.springframework.stereotype.Service;
/**
 * Service implementation for DocumentsVersionWorkflow.
 * @author Rajol version 3.0.0
 */
@Service
public class DocumentsVersionWorkflowServiceImpl implements DocumentsVersionWorkflowService {

private static final Logger LOG = Logger.getLogger(DocumentsVersionWorkflowServiceImpl.class);

	@Autowired
	private DocumentsVersionWorkflowRepository documentsVersionWorkflowRepository;

	@Autowired
	private DocumentsVersionWorkflowMapper documentsVersionWorkflowMapper;

	@Autowired
	private IDMSBaseService idmsBaseService;

	
		
	@Override
	public DocumentsVersionWorkflowDTO insertDocumentsVersionWorkflow(DocumentsVersionWorkflowDTO documentsVersionWorkflowDTOinsert) throws IdmsBaseException{
	try {
			if (documentsVersionWorkflowDTOinsert != null) {
				DocumentsVersionWorkflow documentsVersionWorkflow = documentsVersionWorkflowMapper.convertDocumentsVersionWorkflowDTOToEntity(documentsVersionWorkflowDTOinsert);
				DocumentsVersionWorkflow inserteddocumentsVersionWorkflow = documentsVersionWorkflowRepository.save(documentsVersionWorkflow);

				return (inserteddocumentsVersionWorkflow != null) ? documentsVersionWorkflowMapper.convertEntityToDocumentsVersionWorkflowDTO(inserteddocumentsVersionWorkflow) : null;
			}
		} catch (Exception e) {
			LOG.error("Error while inserting DocumentsVersionWorkflow {} ", e);
		}
		return null;
	}

	@Override
		public DocumentsVersionWorkflowDTO retrieveDocumentsVersionWorkflowById(Long documentsVersionWorkflowId) throws IdmsBaseException{
	try {
			if(documentsVersionWorkflowId != null) {
				DocumentsVersionWorkflow documentsVersionWorkflow = documentsVersionWorkflowRepository.findOne(documentsVersionWorkflowId);
				return (documentsVersionWorkflow != null) ? documentsVersionWorkflowMapper.convertEntityToDocumentsVersionWorkflowDTO(documentsVersionWorkflow) : null;
			}
		}catch (Exception e) {
				LOG.error("Error Message",e);
		}
		return null;
	}

	@Override
	public List<DocumentsVersionWorkflowDTO> retrieveAllDocumentsVersionWorkflow() throws IdmsBaseException {
	try {
			List<DocumentsVersionWorkflow> documentsVersionWorkflowList = documentsVersionWorkflowRepository.findAll();
			return (documentsVersionWorkflowList != null) ? documentsVersionWorkflowMapper.entityListToDocumentsVersionWorkflowDTOList(documentsVersionWorkflowList) : null;
		} catch (Exception e) {
		LOG.error("Error message",e);		
		}
		return Collections.emptyList();
	}

	@Override
	public 	DocumentsVersionWorkflowDTO updateDocumentsVersionWorkflow(DocumentsVersionWorkflowDTO documentsVersionWorkflowDTOUpdate) throws IdmsBaseException{
	try{
		if(documentsVersionWorkflowDTOUpdate !=null){
						DocumentsVersionWorkflow documentsVersionWorkflow = documentsVersionWorkflowMapper.convertDocumentsVersionWorkflowDTOToEntity(documentsVersionWorkflowDTOUpdate);
				DocumentsVersionWorkflow UpdateddocumentsVersionWorkflow = documentsVersionWorkflowRepository.saveAndFlush(documentsVersionWorkflow);
				return (UpdateddocumentsVersionWorkflow != null) ? documentsVersionWorkflowMapper.convertEntityToDocumentsVersionWorkflowDTO(UpdateddocumentsVersionWorkflow) : null;
					
		}
	}
	catch (Exception e){
			LOG.error("Error while updating DocumentsVersionWorkflow {} ", e);
		}
	return null;
	}


	@Override
		public Boolean deleteById(Long documentsVersionWorkflowId) throws IdmsBaseException{
	try {
			DocumentsVersionWorkflow documentsVersionWorkflow = documentsVersionWorkflowRepository.findOne(documentsVersionWorkflowId);
			if (documentsVersionWorkflow != null) {
				StaffMember loginUser = idmsBaseService.currentUser();
				FormatConverterUtils.setInitialDeleteValues(documentsVersionWorkflow, loginUser);
				documentsVersionWorkflowRepository.saveAndFlush(documentsVersionWorkflow);
				return true;
			}
		} catch (Exception e) {
			LOG.error("Error while deleting DocumentsVersionWorkflow {} ", e);
		}
		return false;


	}



}











